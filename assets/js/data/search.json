[ { "title": "System Design: Capacity Estimate", "url": "/posts/system-deisign-capacity-estimation/", "categories": "system-design", "tags": "system-design", "date": "2021-07-10 00:00:00 +0800", "snippet": "Capacity EstimationCapacity 8 bits = 1 byte 1024 bytes = 1 kb 1024 kb = 1 mb char = 1 byte int = 4 byte timestamp = 4 bytesTime 60 x 60 = 3,600s (hour) 3600 x 24 = 86,400s (day) 86,400s x 30 = 2,500,000s (month)CPU와 메모리 속도(절대시간, CPU cycle 대비 상대시간)| type | time | sec ||——..." }, { "title": "주니어 성장일기: 2021.04.27", "url": "/posts/today-i-learned-2021-04-27/", "categories": "TIL", "tags": "TIL", "date": "2021-04-27 00:00:00 +0800", "snippet": " API Secret Manager 애플리케이션, 서비스, IT 리소스에 액세스할 때 필요한 정보를 보호하기 위해 사용한다. 이와 같은 정보를 하드코딩된 상태로 사용하지 않게 해준다. 리소스의 보안 정보 교체를 중앙에서 할 수 있다. Spring Cloud와 AWS Secret Manager: Spring Cloud는 bootstrap.yml(or properties)에서 설정을 로드하게 된다. 스프링 클라우드에서 부트스트랩 컨텍스트를 스프링 컨텍스트의 부모로 먼저 생성되므로 a..." }, { "title": "주니어 성장일기: 2021.04.26", "url": "/posts/today-i-learned-2021-04-26/", "categories": "TIL", "tags": "TIL", "date": "2021-04-26 00:00:00 +0800", "snippet": " 첫 배포한 날 첫 작업을 운영 서버에 배포하였다. 아직은 git 이해가 미숙해서 운영 서버에 배포하기까지 실수가 잦았다. 로드밸런서의 종류 클래식 로드 밸런스(ELB) 레이어 4계층에서 작동 하드웨어 영역으로 데이터를 변경할 수 없다. 서버의 기본 주소가 바뀌면 로드 밸런서를 새로 생성해야 하며, 하나의 주소에 하나의 대상 그룹으로 보내게 된다. 따라서 서버의 구성이 비대해지고 마이클 아키텍처..." }, { "title": "BFS, DFS", "url": "/posts/fastcampus-algorithms-01/", "categories": "algorithms", "tags": "algorithms", "date": "2021-04-26 00:00:00 +0800", "snippet": "파이썬으로 그래프를 표현하는 방법파이썬에서 제공하는 딕셔너리와 리스트 자료 구조를 활용해서 그래프를 표현할 수 있음graph = dict()graph[&#39;A&#39;] = [&#39;B&#39;, &#39;C&#39;]graph[&#39;B&#39;] = [&#39;A&#39;, &#39;D&#39;]graph[&#39;C&#39;] = [&#39;A&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;]graph[&#39;D&#39;] = [&#39;B&#39;, &#39;E&#39;, &#39..." }, { "title": "주니어 성장일기: 2021.04.25", "url": "/posts/today-i-learned-2021-04-25/", "categories": "TIL", "tags": "TIL", "date": "2021-04-25 00:00:00 +0800", "snippet": "오늘은 Catchoo 프로젝트 회의와 ZeroJS 팀D의 스터디가 있는 날이었다.한 일🐈 Catchoo 프로젝트 일주일 회고와 회의회고프론트엔드팀 (현섭, 해리)진행상황 공유 리액트 컴포넌트 스타일링 방식 변경: Module CSS → Styled Component 통계 화면 구현 일반 회원가입과 로그인 기능 보완 변경된 API에 따라 고양이 관리 기능 변경 게시판 이미지 첨부: 이미지를 crop해주는 라이브러리를 적용 서버에게 요청을 보낼 때는 게시글 내용과 복수의 이미지까지 하나의 Form..." }, { "title": "React 자습서 따라하기: #1 React 시작하기", "url": "/posts/react-document-01/", "categories": "react", "tags": "react, javascript", "date": "2021-03-13 00:00:00 +0800", "snippet": "React란 무엇인가요? React는 사용자 인터페이스를 구축하기 위한 선언적이고 효율적이며 유연한 JavaScript 라이브러리이다. “컴포넌트“라고 불리는 작고 고립된 코드의 파편을 이용하여 복잡한 UI를 구성하도록 돕는다.class ShoppingList extends React.Component { render() { return ( &amp;lt;div className=&quot;shopping-list&quot;&amp;gt; &amp;lt;h1&amp;gt;Shopping List ..." }, { "title": "자료구조와 알고리즘이란", "url": "/posts/fastcampus-01/", "categories": "algorithm", "tags": "algorithm", "date": "2021-03-12 00:00:00 +0800", "snippet": "자료구조와 알고리즘이란자료구조란 대량의 데이터를 효율적으로 관리할 수 있는 데이터 구조를 의미한다. 코드상에서 효율적으로 데이터를 처리하기 위해, 데이터 특성에 따라, 체계적으로 데이터를 구조화해야 한다. 어떤 데이터 구조를 사용하느냐에 따라 코드 효율이 달라짐 효율적으로 데이터를 관리하는 예 우편번호: 5자리 우편번호로 국가의 기초구역을 제공 5자리 우편번호에서 앞 3자리는 시, 군, 자치구를 표기, 뒤 2자리는 일련번호로 구성 학생 관리: 학년, 반, 번호를 학생에..." }, { "title": "개발자를 위한 소셜 네트워크 서비스: 뱃지 수집 시스템 구현하기", "url": "/posts/devil-badge/", "categories": "devil", "tags": "project, devil", "date": "2021-03-08 00:00:00 +0800", "snippet": "개발자 소셜 네트워크 서비스인 “DEVIL(Developer Villlage)😈”의 뱃지 수집 기능을 구현하기까지의 과정을 정리하였습니다.바로가기 🤔 기획 📜 요구사항 ✨ 유아이 프로토타입 📂 데이터베이스 모델링 💻 개발 뱃지 수집 기능 Batch Scheduler로 뱃지 수집 기능 구현하기 수집한 뱃지 순서 변경 기능 마이페이지에서 드래그 앤 드롭으로 뱃지 순서를 변경하도록 구현..." }, { "title": "깊이우선탐색(DFS): 올바른 괄호의 개수", "url": "/posts/programmers-survival-kit-07/", "categories": "algorithm", "tags": "algorithm, programmers", "date": "2021-02-26 00:00:00 +0800", "snippet": "문제괄호 쌍의 개수 n이 주어질 때, n개의 괄호 쌍으로 만들 수 있는 모든 가능한 괄호 문자열의 갯수를 반환하는 함수 작성하기제한사항 괄호 쌍의 개수 N : 1 ≤ n ≤ 14, N은 정수입출력 예 n result 2 2 3 5 입출력 예 설명입출력 예 #12개의 괄호쌍으로 [ “(())”, “()()” ]의 2가지를 만들 수 있다.입출력 예 #23개의 괄호쌍으로 [ “((()))”, “(()())”, “(())()..." }, { "title": "너비우선탐색(BFS): 게임 맵 최단거리", "url": "/posts/programmers-survival-kit-06/", "categories": "algorithm", "tags": "algorithm, programmers", "date": "2021-02-24 00:00:00 +0800", "snippet": "문제게임 맵의 상태 maps가 매개변수로 주어질 때, 캐릭터가 상대 팀 진영에 도착하기 위해서 지나가야 하는 칸의 개수의 최솟값을 return 하도록 solution함수를 완성해야 한다. 단, 상대 팀 진영에 도착할 수 없을 때는 -1을 return 한다. maps는 n x m 크기의 게임 맵의 상태가 들어있는 2차원 배열로, n과 m은 각각 1 이상 100 이하의 자연수이다. n과 m은 서로 같을 수도, 다를 수도 있지만, n과 m이 모두 1인 경우는 입력으로 주어지지 않는다. maps는 0과 ..." }, { "title": "해시(Hash): 위장", "url": "/posts/programmers-survival-kit-05/", "categories": "algorithm", "tags": "algorithm, programmers", "date": "2021-02-22 00:00:00 +0800", "snippet": "프로그래머스의 코딩테스트 광탈 방지 Kit: Java편 강의를 참고하여 작성하였습니다.내가 푼 방법public static int solution(String[][] clothes) { int answer = 1; int count = 0; Map&amp;lt;String, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; clothes.length; i++) { map.put(clothes[i][1], count++); ..." }, { "title": "정규표현식: 전역 플래그(/g)와 test()", "url": "/posts/regex-test-g/", "categories": "javascript", "tags": "javascript, regular-expression", "date": "2021-02-21 00:00:00 +0800", "snippet": "오늘 자바스크립트 스터디 중 유버그님께서 질문(과제?!)을 주셔서 test 메서드와 g 플래그와의 관계에 대해 정리를 해보았다.test() 주어진 문자열이 정규 표현식을 만족하는지 판별하고, 그 여부를 true 또는 false로 반환한다고 한다.그런데 왜 같은 정규표현식을 가지고 test를 수행했는데도 true와 false가 반복해서 나타나는 걸까? 상식적으로는 true가 계속 나와야 할 것 같은 데 말이다.test()는 전역 탐색 플래그(/g)를 제공한 정규 표현식에서 여러 번 호출하면, 이전 일치 이후부터 탐색한다. 이건 ..." }, { "title": "모던 자바스크립트 #6.3 변수의 유효범위와 클로저", "url": "/posts/modern-js-0603/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-02-20 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.자바스크립트는 함수 지향 언어이기 때문에 개발자에게 많은 자유도를 준다. 함수를 동적으로 생성할 수 있고, 생성한 함수를 다른 함수에 인수로 넘길 수 있으며, 생성된 곳이 아닌 곳에서 함수를 호출할 수도 있다.함수 내부에서 함수 외부에 있는 변수에 접근할 수 있다. 그런데 함수가 생성된 이후에 외부 변수가 변경되면 어떻게 될까? 함수는 새로운 값을 가져올까? 아니면 생성 시점 이전의 값을 가져올까?코드 블록코드 블록 {...} 안에서 선언한 변수는 블록 안에서만 사용할 ..." }, { "title": "시뮬레이션(Simulation): 숫자게임", "url": "/posts/programmers-survival-kit-04/", "categories": "algorithm", "tags": "algorithm, programmers", "date": "2021-02-20 00:00:00 +0800", "snippet": "프로그래머스의 코딩테스트 광탈 방지 Kit: Java편 강의를 참고하여 작성하였습니다.문제 A팀은 숫자와 숫서가 정해져 있다. B팀의 순서를 조합했을 때 B팀이 배열될 수 있는 모든 경우의 수를 비교해 보고, 그 상황에서의 승점을 계산해서 최댓값을 구하라.내가 시도한 코드public class Simulation { public static void main(String[] args) { System.out.println(solution(new int[] {5, 1, 3, 7}, new int[] {2, 2, 6, ..." }, { "title": "모던 자바스크립트 #6.2 나머지 매개변수와 전개 문법", "url": "/posts/modern-js-0602/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-02-18 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다....은 나머지 매개변수나 전개문법으로 사용된다.나머지 매개변수와 전개문법은 다음의 방법으로 구분할 수 있다. ...이 함수 매개변수의 끝에 있으면 인수 목록의 나머지를 배열로 모아주는 ‘나머지 매개변수’이다. ...이 함수 호출 시 사용되면 배열을 목록으로 확장해주는 ‘전개 문법’이다.사용 패턴 인수 개수에 제한이 없는 함수를 만들 때 나머지 매개변수를 사용한다. 다수의 인수를 받는 함수에 배열을 전달할 때 전개 문법을 사용한다.둘을 함 께 사용하면 매개변수 목..." }, { "title": "이분탐색(Binary Search): 예산", "url": "/posts/programmers-survival-kit-03/", "categories": "algorithm", "tags": "algorithm, programmers", "date": "2021-02-18 00:00:00 +0800", "snippet": "프로그래머스의 코딩테스트 광탈 방지 Kit: Java편 강의를 참고하여 작성하였습니다.예산내가 푼 방법class Solution { public int solution(int[] budgets, int M) { int answer = 0; int min = 0; int max = IntStream.of(budgets).max().orElse(0); int mid = 0; while (min &amp;lt;= max) { mid = (max + min) / 2; int sum..." }, { "title": "모던 자바스크립트 #6.1 재귀와 스택", "url": "/posts/modern-js-0601/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-02-16 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.두 가지 사고방식함수 내부에서 자기 자신을 호출하는 것을 나타내는 프로그래밍 용어이다. 재귀 함수는 우아하게 원하는 문제를 해결할 때 자주 쓰인다.x를 n제곱해 주는 함수function pow(x, n) { if (n == 1) { return x; } else { return x * pow(x, n - 1); }} n == 1: 모든 절차가 간단해진다. 명확한 결괏값을 즉시 도출하므로 이를 재귀의 베이스(base) 라고 한다. basis 라고도 불리는..." }, { "title": "정렬(Sort): 가장 큰 수", "url": "/posts/programmers-survival-kit-02/", "categories": "algorithm", "tags": "algorithm, programmers", "date": "2021-02-16 00:00:00 +0800", "snippet": "가장 큰 수프로그래머스의 코딩테스트 광탈 방지 Kit: Java편 강의를 참고하여 작성하였습니다.문제0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내는 문제이다.제한 사항 numbers의 길이는 1 이상 100,000 이하이다. numbers의 원소는 0 이상 1,000 이하이다. 정답이 너무 클 수 있으니 문자열로 바꾸어 return 한다.입출력 예 numbers return [6, 10, 2] “6210” ..." }, { "title": "그리디(Greedy): 기지국 설치 문제", "url": "/posts/programmers-survival-kit-01/", "categories": "algorithm", "tags": "algorithm, programmers", "date": "2021-02-14 00:00:00 +0800", "snippet": "그리디: 기지국 설치프로그래머스의 코딩테스트 광탈 방지 Kit: Java편 강의를 참고하여 작성하였습니다.내가 시도했던 방법나는 다음과 같이 풀었다. checker라는 배열을 만들어 기본적으로 모든 값을 0으로 셋팅하고, 전파 범위에 속한다면 1을 셋팅하였다. 그리고 이 checker를 탐색하면서 전파 범위가 아니라면 기지국을 세우는 방식으로 하였다.그러나 이럴 경우 일부 테스트 케이스에서는 통과되지 않았다.class Solution { // n 아파트의 개수 stations 기지국이 설치된 아파트 번호 W 전파의 도..." }, { "title": "모던 자바스크립트 #5.11 Date 객체와 날짜", "url": "/posts/modern-js-0511/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-02-12 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다. 자바스크립트에서는 Date 객체를 사용해 날짜와 시간을 나타낸다. Date 객체에는 ‘날짜만’ 혹은 ‘시간만’ 저장하는 것은 불가능하고, 항상 날짜와 시간이 함께 저장된다. Date 객체 생성 방법 new Date() new Date(milliseconds): 1970년의 첫날을 기준으로 흘러간 밀리초(타임스탬프)를 사용한다. new Date(dateString): ex) &quot;2017-01-01&quot;...." }, { "title": "모던 자바스크립트 #5.10. 구조 분해 할당", "url": "/posts/modern-js-0510/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-02-10 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다. 함수에 객체나 배열을 전달해야 하는 경우가 생기곤 한다. 가끔 객체나 배열에 저장된 데이터 전체가 아닌 일부만 필요한 경우가 있다. 또한 함수에 매개변수가 많거나 매개변수 기본값이 필요한 경우도 있다. 이럴 때 구조 분해 할당을 사용한다. 구조 분해 할당을 사용하면 객체나 배열을 변수로 ‘분해’할 수 있다. 구조 분해 할당은 어떤 것을 복사한 이후에 변수로 분해(destructurize)해준다. 분해 대상은 수정 또는 파괴되지 않는다...." }, { "title": "모던 자바스크립트 #5.9. Object.keys, values, entries", "url": "/posts/modern-js-0509/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-02-10 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다. iteration에 필요한 메서드들이다. Map, Set, Array에서 사용할 수 있다. 일반 객체에도 순회 관련 메서드가 있지만 keys(), values(), entries()와는 문법에 차이가 있다.Object.keys, values, entries Object.keys(obj): 객체의 키만 담은 배열을 반환한다. Object.values(obj): 객체의 값만 담은 배열을 반환한다. Object.entries(obj) – [키, 값] 쌍을 담은 배..." }, { "title": "HIWORK: Field &#39;cNo&#39; doesn&#39;t have a default value", "url": "/posts/hiwork-11/", "categories": "hiwork", "tags": "project, trouble-shooting, hiwork", "date": "2021-02-06 00:00:00 +0800", "snippet": "문제댓글 추가 시 다음과 같이 cNo의 기본값이 없다는 에러가 나타난다.java.sql.SQLException: Field &#39;cNo&#39; doesn&#39;t have a default value문제 원인다음과 같이 댓글 도메인에 GeneratedValue 에노테이션을 날아줬는데도 에러가 발생하여 이상하다고 생각했다. @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = &quot;cno&quot;) private int no;실제로는 ..." }, { "title": "모던 자바스크립트 #5.8. 위크맵과 위크셋", "url": "/posts/modern-js-0508/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-02-02 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.위크맵 맵에서 객체를 키로 사용한 경우 맵이 메모리에 있는 한 객체도 메모리에 남는다. 가비지 컬렉터의 대상이 아니다. let john = { name: &quot;John&quot; };let map = new Map();map.set(john, &quot;...&quot;);john = null; // 참조를 null로 덮어씀 // john을 나타내는 객체는 맵 안에 저장되어 있다.// map.keys()를 이용하면 해당 객체를 얻는 것도 가능하다.f..." }, { "title": "모던 자바스크립트 #5.7. 맵과 셋", "url": "/posts/modern-js-0507/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-02-01 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.맵은 키가 있는 값이 저장된 컬렉션이다.주요 메서드와 프로퍼티 new Map([iterable]): 맵을 만든다. [key, value] 쌍이 있는 iterable(예: 배열)을 선택적으로 넘길 수 있는데, 이때 넘긴 이터러블 객체는 맵 초기화에 사용된다. map.set(key, value): 키를 이용해 값을 저장한다. set을 호출할 때마다 맵 자신이 반환되기 때문에 map.set을 체이닝할 수 있다. map.set(&#39;1&#39..." }, { "title": "HIWORK: Column &#39;regiDate&#39; cannot be null", "url": "/posts/hiwork-09/", "categories": "hiwork", "tags": "project, trouble-shooting, hiwork", "date": "2021-01-31 00:00:00 +0800", "snippet": "문제/board/add 요청 시 다음과 같은 예외가 발생한다.java.sql.SQLException: Column &#39;regiDate&#39; cannot be nullboard/add 시 등록일 프로퍼티가 null이어도 시스템 시간이 자동 등록되도록 만들어줘야 한다.시도 방법DB 자체에 regiDate 기본값 표현식 now()가 설정되어 있지 않아 발생하는 문제로 알았다. 따라서 게시글 테이블뿐만 아니라 사원, 대화, 휴가신청, 댓글 테이블의 생성일자 컬럼에 기본값 표현식 now()를 추가하였다. 그러나 그럼에도 불구..." }, { "title": "모던 자바스크립트 #5.6. iterator", "url": "/posts/modern-js-0506/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-31 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.for..of을 사용할 수 있는 객체를 이터러블이라고 부른다. 배열뿐만 아니라 문자열 등 다수의 내장 객체가 이터러블이다. 이터러블엔 메서드 Symbol.iterator가 반드시 구현되어 있어야 한다. obj[Symbol.iterator]의 결과는 이터레이터라고 부른다. 이터레이터는 이어지는 반복 과정을 처리한다. 이터레이터엔 객체 {done: Boolean, value: any}을 반환하는 메서드 next()가 반드시 구현되어 있어야 ..." }, { "title": "이것이 안드로이드다 with 코틀린 #1 코틀린 기본문법: 7. 클래스와 설계", "url": "/posts/android-0307/", "categories": "android-kotlin", "tags": "android-kotlin", "date": "2021-01-31 00:00:00 +0800", "snippet": "Chapter 03. 코틀린 기본문법7. 클래스와 설계그룹화할 수 있는 함수와 변수를 한 군데 모아놓고 사용하기 쉽게 이름을 붙여 놓은 것을 클래스라고 한다.클래스의 기본구조class 클래스명 { var 변수 fun 함수() { // 코드 }}클래스의 생성 코틀린은 객체를 사용하기 위해 두 가지 형태의 생성자(함수)를 제공한다. 클래스를 사용한다는 것은 곧 클래스라는 그룹으로 묶여 있는 코드를 실행하는 것이기 때문에 함수 형태로 제공되는 생성자를 호출해야지만 클래스가 실행되는 것이다. ..." }, { "title": "HIWORK: could not extract ResultSet 에러", "url": "/posts/hiwork-07/", "categories": "hiwork", "tags": "project, trouble-shooting, hiwork", "date": "2021-01-30 00:00:00 +0800", "snippet": "문제/board/list로 요청시 다음과 같은 에러가 발생한다.There was an unexpected error (type=Internal Server Error, status=500).could not extract ResultSet; SQL [n/a]; nested exception is org.hibernate.exception.SQLGrammarException: could not extract ResultSetorg.springframework.dao.InvalidDataAccessResourceUsageExcep..." }, { "title": "모던 자바스크립트 #5.5. 배열과 메서드", "url": "/posts/modern-js-0505/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-30 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다. 요소 추가 및 삭제 push(...items): 맨 끝에 요소 추가 pop(): 맨 끝 요소 추출 shift(): 첫 요소 추출 unshift(): 맨 앞에 요소 추가 splice(pos, deleteCount, ...items): pos부터 deleteCount개의 요소를 지우고, items 추..." }, { "title": "이것이 안드로이드다 with 코틀린 #1 코틀린 기본문법: 6. 함수", "url": "/posts/android-0306/", "categories": "android-kotlin", "tags": "android-kotlin", "date": "2021-01-30 00:00:00 +0800", "snippet": "Chapter 03. 코틀린 기본문법6. 함수fun 함수명(파라미터 이름: 타입): 반환 타입 { return 값}함수에 괄호를 붙이지 않으면 함수의 코드가 실행되지 않고 마치 값처럼 인식된다.함수 파라미터의 정의코틀린에서 함수 파라미터를 통해 입력되는 모든 값은 변하지 않는 이뮤터블이다. 따라서 코틀린에서의 함수 파라미터는 모두 상수 키워드 val이 생략된 형태라고 생각할 수 있다.fun 함수 ((val 생략) name1: String, name2: Int, name3: Double) { 실행 코드 }파라미터의 기본값 정의..." }, { "title": "모던 자바스크립트 #5.4. 배열", "url": "/posts/modern-js-0504/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-29 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다. 순서가 있는 컬렉션을 다뤄야할 때 객체를 사용하면 순서와 관련된 메서드가 없어 편리하지 않다. 객체는 순서를 고려하지 않고 만들어진 자료구조이기 때문이다. 따라서 객체를 이용하면 새로운 프로퍼티를 기존 프로퍼티 ‘사이에’ 끼워넣는 것도 불가능하다. 배열은 특수한 형태의 객체이다. 순서가 있는 자료를 저장하고 관리하는 용도에 최적화되어 있다. 선언 방법 let arr = [item1, item2...]; // 가장 많이..." }, { "title": "이것이 안드로이드다 with 코틀린 #1 코틀린 기본문법: 5. 반복문", "url": "/posts/android-0305/", "categories": "android-kotlin", "tags": "android-kotlin", "date": "2021-01-29 00:00:00 +0800", "snippet": "Chapter 03. 코틀린 기본문법5. 반복문for 반복문for (반복할 범위) { // 실행 코드}for in..: 일반적인 형태의 for 반복문for (변수 in 시작값..종료값) { // 실행 코드}until: 마지막 숫자 제외하기종료값 이전까지 반복한다.for (변수 in 시작값 until 종료값)배열의 인덱스를 사용하여 차리하는 코드에서 사용할 수 있다.var array = arrayOf(&quot;JAN&quot;, &quot;FEB&quot;, &quot;MAR&quot;, &quot;APR&quot;, &q..." }, { "title": "모던 자바스크립트 #5.3. 문자열", "url": "/posts/modern-js-0503/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-28 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다. 자바스크립트에서는 UTF-16을 사용해 문자열을 코딩한다. \\n을 사용할 수 있다. \\u...를 사용하면 해당 문자의 유니코드를 사용해 글자를 만들 수 있다. 문자열 내의 글자 하나를 얻으려면 대괄호 []를 사용한다. 부분 문자열을 얻으려면 slice나 substring을 사용한다. str.slice(start[, end]) 문자열의 start부터 end 까지(end ..." }, { "title": "이것이 안드로이드다 with 코틀린 #1 코틀린 기본문법: 4. 배열과 컬렉션", "url": "/posts/android-0304/", "categories": "android-kotlin", "tags": "android-kotlin", "date": "2021-01-28 00:00:00 +0800", "snippet": "Chapter 03. 코틀린 기본문법4 배열과 컬렉션배열var 변수 = Array(개수)배열 객체는 기본 타입 뒤에 Array를 붙여서 만든다.var students = IntArray(10)var longArray = LongArray(10)var CharArray = CharArray(10)var FloatArray = FloatArray(10)var DoubleArray = DoubleArray(10)문자 배열에 빈 공간 할당하기String은 기본 타입이 아니기 때문에 StringArray는 없지만 다음과 같이 빈 문자열..." }, { "title": "모던 자바스크립트 #5.2. 숫자형", "url": "/posts/modern-js-0502/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-27 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.5.2. 숫자형 0이 많이 붙은 숫자는 다음과 같이 표현할 수 있다. 0의 개수를 &#39;e&#39; 뒤에 추가한다. 123e6은 0이 6개인 숫자, 123000000을 나타낸다. &#39;e&#39; 다음에 음수가 오면, 음수의 절대값 만큼 10을 거듭제곱한 숫자로 주어진 숫자를 나눈다. 123e-6은 0.000123을 나타낸다. 진법을 이용할 수 있다. 자바스크립트는 특별한 변환 없이 16진수(0..." }, { "title": "이것이 안드로이드다 with 코틀린 #1 코틀린 기본문법: 3. 조건문", "url": "/posts/android-0303/", "categories": "android-kotlin", "tags": "android-kotlin", "date": "2021-01-27 00:00:00 +0800", "snippet": "Chapter 03. 코틀린 기본문법3. 조건문조건문 if변수에 직접 if문 사용하기if문의 조건식 결과를 변수에 대입할 수 있다.var a = 5var b = 3var bigger if (a &amp;gt; b) a else bif문의 마지막 값을 반환값으로 사용하기if문의 코드 영역이 여러 줄일 경우에도 마지막 줄을 변숫값으로 사용할 수 있다.var eraOfRyu = 2.32var eraOfDegrom = 2.43val era = if (eraOfRyu &amp;lt; eraOfDegrom) { Log.d(&quot;M..." }, { "title": "모던 자바스크립트 #5.1. 원시값의 메서드", "url": "/posts/modern-js-0501/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-26 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.5.1. 원시값의 메서드 문자열이나 숫자 같은 원시값을 다루어야 하는 작업이 많은데, 메서드를 활용하면 작업을 수월하게 할 수 있을 것이다. 그러나 원시값은 가능한 한 빠르고 가벼워야 한다. 자바스크립트는 원시값(문자열, 숫자 등)을 마치 객체처럼 다룰 수 있게 해준다. ‘null’과 ‘undefined’를 제외한 원시값에 다양한 메서드를 호출할 수 있다. 그런데 자바스크립트 엔진은 내부 최적화가 잘 되어있어 메서드를 호출해도 많은 리소스를 쓰지 않..." }, { "title": "이것이 안드로이드다 with 코틀린 #1 코틀린 기본문법: 2. 변수와 상수", "url": "/posts/android-0302/", "categories": "android-kotlin", "tags": "android-kotlin", "date": "2021-01-26 00:00:00 +0800", "snippet": "Chapter 03. 코틀린 기본문법2. 변수와 상수변수 var변수는 다음 두 가지 방법으로 선언하고 활용할 수 있다. 변수 선언과 동시에 값 넣기 입력되는 값으로 타입을 추론할 수 있다. 값이 입력되는 순간 해당 값의 형태로 변수의 타입이 결정된다. var 변수명(이름) = 값 값으로 초기화하지 않고 선언만 하고 사용하기 선언만 할 경우에는 반드시 먼저 변수명 옆에 콜론(:) 구분자를 붙여서 타입(자료형)을 지정해야 한다. var 변수명: 타입변수명 = 값 변수는 최..." }, { "title": "모던 자바스크립트 #4.8. 객체를 원시형으로 변환하기", "url": "/posts/modern-js-0408/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-25 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.4.8 객체를 원시형으로 변환하기객체는 논리 평가 시 true를 반환한다. 객체는 숫자형이나 문자형으로만 형변환이 일어난다고 생각하면 된다.원시값을 기대하는 내장함수나 연산자를 사용할 때 객체-원사형으로의 형 변환이 자동으로 일어난다.특수 객체 메서드를 사용하면 숫자형이나 문자형으로의 형변환을 원하는 대로 조절할 수 있다. 객체-원시형으로의 형 변환은 hint라고 불리는 값을 기준으로 세 종류로 구분할 수 있다. hint는 목표로 하는 자료형이다. &quot;s..." }, { "title": "이것이 안드로이드다 with 코틀린 #1 코틀린 기본문법: 1. 코딩 준비하기", "url": "/posts/android-0301/", "categories": "android-kotlin", "tags": "android-kotlin", "date": "2021-01-25 00:00:00 +0800", "snippet": "Chapter 03. 코틀린 기본문법1. 코딩 준비하기안드로이드 앱을 실행하면 많은 로그가 생성되는데, 이때 안드로이드 스튜디오의 로그라는 클래스를 코드 중간중간에 적절하게 사용하여 앱의 실행흐름 혹은 결과값을 확인할 수 있다.로그의 활용작성한 코드의 결과값을 에뮬레이터 화면에서 확인할 수 있지만 안드로이드 스튜디오가 제공하는 로그(Log)에 정의되어 있는 함수를 활용할 수도 있다.Log.d(&quot;태그&quot;, &quot;출력 메시지&quot;); 태그는 검색 용도로 사용된다.class MainActivity : A..." }, { "title": "모던 자바스크립트 #4.7. 심볼형", "url": "/posts/modern-js-0407/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-24 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.4.7 심볼형 객체 프로퍼티 키로 오직 문자형과 심볼형만 가능하다. Symbol은 원시형 데이터로, 유일한 식별자(unique identifier)를 만드는 데 사용한다. Symbol()을 호출하면 심볼을 만들 수 있다. 설명(이름)은 선택적으로 추가할 수 있다. 심볼 이름은 디버깅 시 유리하다. 심볼은 유일성이 보장되는 자료형이기 때문에, 설명(이름)이 같더라도 값이 항상 다르다. 심볼 설명은 어떤 것에도 영향을 주지 않는..." }, { "title": "모던 자바스크립트 #4.6. 옵셔널 체이닝 &#39;?.&#39;", "url": "/posts/modern-js-0406/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-23 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.4.6. 옵셔널 체이닝 ‘?.”옵셔널 체이닝(optional chaining) ?.을 사용하면 프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근할 수 있다.옵셔널 체이닝이 필요한 이유undefined 값의 프로퍼티를 읽으려 할 때 에러 발생let user = {}; // 주소 정보가 없는 사용자.alert(user.address.street); // TypeError: Cannot read property &#39;street&#39; of undefinednull ..." }, { "title": "모던 자바스크립트 #4.5 new 연산자와 생성자 함수", "url": "/posts/modern-js-0405/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-22 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.4.5. new 연산자와 생성자 함수new 연산자와 생성자 함수를 사용하면 유사한 객체 여러 개를 쉽게 만들 수 있다.생성자 함수(construction function) 함수의 이름의 첫 글자는 대문자로 시작한다. 반드시 new 연산자를 붙여 실행한다.function User(name) { // this = {}; (빈 객체가 암시적으로 만들어짐) this.name = name; this.isAdmin = false; // return this; (this가..." }, { "title": "모던 자바스크립트 #4.4. 메서드와 this", "url": "/posts/modern-js-0404/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-21 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.4.4. 메서드와 this 객체는 사용자, 주문 등 실제 존재하는 개체(entity)를 표현하고자 할 때 생성된다. 사용자는 현실에서 장바구니에서 물건 선택하기, 로그인하기 등 행동을 한다. 마찬가지로 사용자를 나타내는 객체 user도 특정한 행동을 할 수 있다. 자바스크립트에서는 객체의 프로퍼티에 함수를 할당해 객체에게 행동할 수 있는 능력을 부여한다.메서드 만들기객체 user에게 인사할 수 있는 능력을 부여한다.let user = { name: &quot;Jo..." }, { "title": "모던 자바스크립트 #4.3. 가비지 컬렉션", "url": "/posts/modern-js-0403/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-21 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.4.3. 가비지 컬렉션가비지 컬렉션 기준 도달 가능한(reachable) 값은 메모리에서 삭제되지 않는다. 도달 가능한(reachable) 값은 어떻게든 접근하거나 사용할 수 있는 값을 의미한다. 루트(root): 태생부터 도달 가능하기 때문에 명백한 이유 없이 삭제되지 않는 값 현재 함수의 지역변수와 매개변수 중첩 함수의 체인에 있는 함수에서 사용되는 변수와 매개변수 전역 변수 루트가 참조하는 값이나 체이닝으로 루트에..." }, { "title": "모던 자바스크립트 #4.2. 참조에 의한 객체 복사", "url": "/posts/modern-js-0402/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-20 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.4.2. 참조에 의한 객체 복사 객체는 참조에 의해(by reference) 저장되고 복사된다. 원시값은 값 그대로 저장, 할당되고 복사된다. 변수에는 객체가 그대로 저장되는 것이 아니라, ** 객체가 저장되어 있는 **메모리 주소인 객체에 대한 참조 값이 저장된다. 따라서 객체가 할당된 변수를 복사할 때는 객체의 참조 값이 복사되고 객체는 복사되지 않는다. 객체에 접근하거나 객체를 조작할 때는 여러 변수를 사용할 수 있다.참조에 의한 비교 객체 비교 ..." }, { "title": "모던 자바스크립트 #4.1. 객체", "url": "/posts/modern-js-0401/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-20 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.4.1. 객체 여덟 개의 자료형 중 일곱 개는 오직 하나의 데이터만 담을 수 있어 원시형(primitive type)이라 부른다. 반면 객체형은 키로 구분된 데이터 집합이나 복잡한 개체(entity)와 같이 다양한 데이터를 저장할 수 있다. 객체는 몇가지 특수한 기능을 가진 연관 배열(associative array) 프로퍼티는 키(key) : 값(value) 쌍으로 이루어져 잇다. key엔 문자열이거나 심볼..." }, { "title": "스프링 입문 #7 AOP(Aspect Oriented Programming)", "url": "/posts/spring-basic-07/", "categories": "spring", "tags": "spring", "date": "2021-01-19 00:00:00 +0800", "snippet": "Section 7. AOP1강. AOP가 필요한 상황 모든 메서드의 호출 시간을 측정하고 싶다면? 공통 관심 사항(cross-cutting concern) vs 핵심 관심 사항(core concern) 회원 가입 시간, 회원 조회 시간을 측정하고 싶다면?위와 같이 시간 측정 로직을 각 메서드에 포함시켜서 작성할 수밖에 없다. 만약 초단위에서 밀리초단위로 변경한다고 한다면 모든 메서드의 시간 측정 로직을 다 변경해야 할 것이다. 처음 메서드를 실행할 때는 로딩할 것(클래스 메타데이타 등등)이 있어서 오래 걸리지만, 그 다..." }, { "title": "모던 자바스크립트 #3.6. 폴리필", "url": "/posts/modern-js-0306/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-19 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.3.6. 폴리필 자바스크립트는 끊임없이 진화하는 언어이다. 새로운 제안이 정기적으로 등록, 분석되고 가치가 있다고 판단되는 제안은 https://tc39.github.io/ecma262/에 추가된다. 그리고 궁극적으로 명세서(specification)에 등록된다. 자바스크립트 엔진을 만드는 각 조직은 우선순위를 매겨 명세서 내 어떤 기능을 먼저 구현할 지 결정한다. 즉 엔진이 표준 전체를 지원하지 않고 일부만 지원하는 것은 흔한 일이다.바벨바벨(Babel)은 트랜스파..." }, { "title": "모던 자바스크립트 #3.5. 테스트 자동화와 Mocha", "url": "/posts/modern-js-0305/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-19 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.3.5. 테스트 자동화와 Mocha테스트를 하는 이유 코드를 수동으로 재실행하면서 테스트를 하면 무언가를 놓치기 쉽다. 테스팅 자동화는 테스트 코드가 실제 동작에 관여하는 코드와 별개로 작성되었을 때 가능하다. 테스트 코드를 이용하면 함수를 다양한 조건에서 실행해볼 수 있는데, 이때 실행 결과와 기대 결과를 비교할 수 있다. 잘 테스트된 코드는 더 나은 아키텍처를 만든다. 테스트를 작성하려면 함수가 어떤 동작을 하는지, 입력값은 무엇이고 출력값은 무엇인지 정의하고 ..." }, { "title": "스프링 입문 #6 스프링 DB 접근 기술", "url": "/posts/spring-basic-06/", "categories": "spring", "tags": "spring", "date": "2021-01-18 00:00:00 +0800", "snippet": "Section 6. 스프링 DB 접근 기술실무에서는 MySql이나 Oracle DB가 많이 쓰이는데, 특히 MySql 계열 DB를 많이 사용된다.1강. H2 데이터베이스 설치개발이나 테스트 용도(교육용)로 가볍고 편리한 DB, 웹 화면 제공 H2 공식 사이트에서 다운로드 및 설치 h2 데이터베이스 버전은 스프링 부트 버전에 맞춘다. 권한 주기: chmod 755 h2.sh 실행: /h2.sh 데이터베이스 파일 생성 방법 jdbc:h2:~/test (최..." }, { "title": "모던 자바스크립트 #3.4. 닌자 코드", "url": "/posts/modern-js-0304/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-18 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.3.4. 닌자 코드다음과 같은 코드를 작성하는 것은 지양하자. 유지보수가 어렵기 때문이다. 코드 가능한 짧게 쓰기 글자 하나만 사용하기 그 글자가 무엇을 의미하는 지 해석하기 어렵다. 약어 사용하기 포괄적인 명사 사용하기 data, value 등과 같은 아무 의미 없는 변수명 사용하기 str, num과 같이 자료형과 연관된 변수명 사용하기: 자료형 파악하는 것은 디버깅 툴을 사용하면 되지만 변수..." }, { "title": "모던 자바스크립트 #3.3. 주석", "url": "/posts/modern-js-0303/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-18 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.3.3. 주석좋은 코드엔 설명이 담긴(explanatory) 주석이 많아선 안 된다. 주석 없이 코드 자체만으로 코드가 무슨 일을 하는지 쉽게 이해할 수 있어야 한다.함수 내 코드 일부를 새로운 함수로 옮기고 적절한 이름을 붙이면 함수 이름 자체가 주석 역할을 하므로 코드를 쉽게 이해할 수 잇따. 이런 코드를 자기 설명적인(self-descriptive) 코드라 부른다.그러나 실무에서는 설명이 담긴 주소를 작성하는 것이 불가피한 경우가 있다.좋은 주석 아키텍처를..." }, { "title": "이것이 안드로이드다 with 코틀린 #1 코틀린 안드로이드 이해하기", "url": "/posts/android-01/", "categories": "android-kotlin", "tags": "android-kotlin", "date": "2021-01-17 00:00:00 +0800", "snippet": "Chapter 01. 코틀린 안드로이드 이해하기1. 안드로이드와 코틀린1.1 운영체제와 플랫폼안드로이드 플랫폼은 리눅스 운영체제 안에서 리눅스와 상호작용하면서 동작한다. 전체 아키텍처 위쪽에 안드로이드가 실행되는 런타임 영역이 존재한다. System Apps Java API Framework Native C/C++ Libraries Android Runtime Hardware Abstraction Layer (HAL) ..." }, { "title": "스프링 입문 #5 회원 관리 예제 - 웹 MVC 개발", "url": "/posts/spring-basic-05/", "categories": "spring", "tags": "spring", "date": "2021-01-15 00:00:00 +0800", "snippet": "Section 5. 회원 관리 예제 - 웹 MVC 개발1강. 회원 웹 기능 - 홈 화면 추가홈 컨트롤러 추가@Controllerpublic class HomeController { @GetMapping(&quot;/&quot;) public String home() { return &quot;home&quot;; }}회원 관리용 홈&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&amp;lt;bo..." }, { "title": "모던 자바스크립트 #3.2. 코딩 스타일", "url": "/posts/modern-js-0302/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-15 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.3.2. 코딩 스타일문법 가로 들여쓰기: 스페이스 두 개 혹은 네개를 사용해 만든다. 탭 대신 스페이스를 이용하면 들여쓰기 정도를 유연하게 변경할 수 있다는 장점이 있다. 반복문 사용시 중첩문의 깊이가 깊어지면 continue 지시자를 사용하는 것이 좋은 대안이 될 수 있다. for (let i = 0; i &amp;lt; 10; i++) { if (cond) { ... // &amp;lt;- 중첩 레벨이 하나 더 늘어났습니다. }} ..." }, { "title": "모던 자바스크립트 #3.1. Chrome으로 디버깅하기", "url": "/posts/modern-js-0301/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-15 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.3.1. Chrome으로 디버깅하기 디버깅(debugging): 스크립트 내 에러를 검출해 제거하는 일련의 과정 F12: 개발자 도구 여는 단축키Source 패널 파일 탐색 영역: 페이지를 구성하는 데 쓰인 모든 리소스(HTML, JavaScript, CSS, 이미지 파일 등)를 트리 형태로 보여준다. Chrome 익스텐션이 여기 나타날 때도 있다. 코드 에디터 영역: 리소스 영역에서 선택한 파일의 소스 코드를 보여준다. 여기서 소스 코드를 편집할 수도 있다. ..." }, { "title": "스프링 입문 #4 스프링 빈과 의존 관계", "url": "/posts/spring-basic-04/", "categories": "spring", "tags": "spring", "date": "2021-01-14 00:00:00 +0800", "snippet": "Section 4. 스프링 빈과 의존 관계1강. 컴포넌트 스캔과 자동 의존관계 설정화면을 만들기 위해서는 컨트롤러와 뷰 템플릿이 필요하다. 이제 MemberController가 MemberService를 통해 회원가입을 하고 데이터를 조회해야 한다. 이것을 MemberController가 MemberService에 의존한다고 이야기한다. 이 작업을 스프링 스럽게 해보겠다.회원 컨트롤러가 회원서비스와 회원 리포지토리를 사용할 수 있게 의존관계를 준비하자.MemberController@Controller 애노테이션을 붙이면 어떻게..." }, { "title": "모던 자바스크립트 #2.18. 기본 문법 요약", "url": "/posts/modern-js-0218/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-14 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.18. 기본 문법 요약 자바스크립트는 동적 타이핑을 허용하기 때문에, 자료형을 바꿔가며 값을 할당할 수 있다. let x = 5;x = &quot;John&quot;; typeof 연산자는 값의 자료형을 반환해주는데, 두 가지 예외사항이 있다. typeof null == &quot;object&quot; // 언어 자체의 오류typeof function(){} == &quot;function&quot; // 함수는 특별하게 취급..." }, { "title": "모던 자바스크립트 #2.17. 화살표 함수 기본", "url": "/posts/modern-js-0217/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-14 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.17. 화살표 함수 기본let func = (arg1, arg2, arg3 ...argN) =&amp;gt; expression함수 func는 화살표 우측의 표현식을 평가하고 평가 결과를 반환한다.다음과 같이 함수를 동적으로 만들 수 있다.let age = prompt(&quot;나이를 알려주세요.&quot;, 18);let welcome = (age &amp;lt; 18) ? () =&amp;gt; alert(&#39;안녕&#39;) : () =&amp;gt; ..." }, { "title": "스프링 입문 #3 회원관리 예제: 백엔드 개발", "url": "/posts/spring-basic-03/", "categories": "spring", "tags": "spring", "date": "2021-01-13 00:00:00 +0800", "snippet": "Section 3. 회원관리 예제: 백엔드 개발1강. 비즈니스 요구사항 정리 데이터: 회원ID, 이름 기능: 회원 등록, 조회 아직 데이터 저장소가 선정되지 않음(가상의 시나리오) 따라서 우선 인터페이스(MemberRepository)로 구현 클래스(MemoryMemberRepository)를 변경할 수 있도록 설계한다. 개발을 진행하기 위해 초기 개발 단계에서는 구현체로 가벼운 메모리 기반의 데이터 저장소를 사용한다. 향후에 RDB, NoSQL 등등 다양한 저장소를 데이터 저장소로 바꿔..." }, { "title": "모던 자바스크립트 #2.16. 함수 표현식", "url": "/posts/modern-js-0216/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-13 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.16. 함수 표현식(Function Expression) 자바스크립트에서 함수는 값이다. 다른 언어처럼 특별한 동작을 하는 구조로 취급되지 않는다. 다만 호출할 수 있다는 점 때문에 일반적인 값과 다른 특별한 종류의 값이다. 함수를 생성하고 변수에 값을 할당하는 것처럼 함수가 변수에 할당되었다. 괄호가 있어야만 함수가 호출된다. 괄호 없이 함수 이름만 언급하면 함수 소스 코드가 문자형으로 바뀌어 출력된다. function say..." }, { "title": "모던 자바스크립트 #2.15. 함수", "url": "/posts/modern-js-0215/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-13 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.15. 함수 함수는 프로그램을 구성하는 주요 ‘구성 요소(building block)’이다. 함수를 이용하면 중복 없이 유사한 동작을 하는 코드를 여러 번 호출할 수 있다. 정의한 함수는 함수 이름 옆에 괄호를 붙여서 호출할 수 있다. 함수 내에서 선언한 변수인 지역 변수(local variable)는 함수 안에서만 접근할 수 있다. 함수 내부에서 함수 외부의 변수인 외부 변수(outer variabe)에 접근, 수정할 수 있다. 함수 내부에 외부 변수와 동..." }, { "title": "스프링 입문 #2 스프링 웹 개발 기초", "url": "/posts/spring-basic-02/", "categories": "spring", "tags": "spring", "date": "2021-01-12 00:00:00 +0800", "snippet": "Section 2: 스프링 웹 개발 기초웹 개발에는 크게 정적 컨텐츠, MVC와 템플릿 엔진, API의 세 가지 방법이 있다. 정적 컨텐츠: 서버에서 하는 일 없이 서버에서 파일을 그대로 내려준다. MVC와 템플릿 엔진: 가장 많이 사용하는 방식이다. JSP, PHP 등이 템플릿 엔진이다. 정적 컨텐츠는 그냥 파일을 그대로 웹브라우저에게 전달한다면, MVC와 템플릿 엔진은 서버에서 HTML을 변형해서 내려주는 방식이다. 이를 위해 앱을 Controller, Model, View 세 가지 역할로 분리한다. 이를 MVC 패턴이..." }, { "title": "모던 자바스크립트 #2.14. switch문", "url": "/posts/modern-js-0214/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-12 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.14. switch문 switch문을 사용한 비교법은 특정 변수를 다양한 상황에서 비교할 수 있게 해준다. 코드 자체가 비교 상황을 잘 설명한다는 장점도 있다. case문 안에 break문이 없으면 조건에 부합하는지 여부를 따지지 않고 이어지는 case문을 실행한다. switch 문은 동등 비교가 아니라 일치 비교로 조건을 확인한다. 비교하려는 값과 case문의 형과 값이 같아야 해당 case문이 실행된다." }, { "title": "모던 자바스크립트 #2.13. while과 for 반복문", "url": "/posts/modern-js-0213/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-12 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.13. while과 for 반복문while 반복문 본문이 한 번 실행되는 것을 반복(iteration)이라고 한다. 브라우저는 무한 반복을 멈추게 해주는 실질적인 수단을 제공합니다. 서버 사이드 자바스크립트도 이런 수단을 제공해 주므로 무한으로 반복되는 프로세스를 죽일 수 있다. 반복문 조건엔 비교뿐만 아니라 모든 종류의 표현식, 변수가 올 수 있다. do..while 문법은 조건이 truthy인지 아닌지 상관 없이 본문을 최소 한 번이라도 실행하고 싶을 때만..." }, { "title": "스프링 입문 #1 프로젝트 환경설정", "url": "/posts/spring-basic-01/", "categories": "spring", "tags": "spring", "date": "2021-01-11 00:00:00 +0800", "snippet": "Section 1. 프로젝트 환경설정1강. 프로젝트 생성스프링 부트 스타터 사이트에서 스프링 프로젝트를 생성하였다. 프로젝트 선택 Project: Gradle Project (요즘에는 Maven보다 Gradle을 더 많이 사용하는 추세이다.) Spring Boot: 2.3.x Language: Java Packaging: Jar Java: 11 Project Metadata groupId: hello artifactId: hello-sp..." }, { "title": "모던 자바스크립트 #2.12. null 병합 연산자 &#39;??&#39;", "url": "/posts/modern-js-0212/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-11 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.12. null 병합 연산자(nullish coalescing operator) ‘??’여러 피연산자 중 그 값이 ‘확정되어 있는’ 변수를 찾을 수 있따.a ?? b의 평가 결과는 다음과 같다 a가 null도 아니고 undefined도 아니면 a 그 외의 경우는 bx = a ?? b와 동일한 동작을 하는 코드는 다음과 같다.x = (a !== null &amp;amp;&amp;amp; a !== undefined) ? a : b;null 병합 연산자 ??를 사용하..." }, { "title": "모던 자바스크립트 #2.11. 논리 연산자", "url": "/posts/modern-js-0211/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-11 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.11. 논리 연산자논리연산자에는 ||(OR), &amp;amp;&amp;amp;(AND), !(NOT) 세 가지가 있다. 논리연산자는 피연산자로 불린형뿐만 아니라 모든 타입의 값을 받을 수 있다. 연산 결과 역시 모든 타입이 될 수 있다.||(OR)alert( true || true ); // truealert( false || true ); // truealert( true || false ); // truealert( false || false ); // ..." }, { "title": "모던 자바스크립트 #2.10. if와 &#39;?&#39;를 사용한 조건 처리", "url": "/posts/modern-js-0210/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-08 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.10. if와 ‘?’를 사용한 조건 처리‘if’문if문은 괄호 안의 표현식을 평가하고 그 결과를 불린값으로 변환한다. falsy(거짓 같은) 값: 숫자 0, 빈 문자열 &quot;&quot;, null, undefined, NaN와 같이 불린형으로 변환 시 false가 되는 값 truthy(참 같은) 값: falsy 값 이외의 값은 불린형으로 변환 시 true가 된다.조건부 연산자 ‘?’조건에 따라 다른 값을 변수에 할당해줘야 할 때 사용한다.let result ..." }, { "title": "모던 자바스크립트 #2.9. 비교 연산자", "url": "/posts/modern-js-0209/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-08 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.9. 비교 연산자문자열 비교자바스크립트는 사전순(사전편집순; lexicographical)으로 문자열을 비교한다. 문자열을 구성하는 문자 하나하나를 비교해가며 문자열을 비교한다. 정확히는 사전순이 아니라 유니코드순이다. 자바스크립트가 대소문자를 따질 때 유니코드에서는 소문자가 대문자보다 더 큰 인덱스를 가지고 있기 때문에 소문자가 더 크다고 판단한다.다른 형을 가진 값 간의 비교비교하려는 값의 자료형이 다르면 자바스크립트는 이 값들을 숫자형으로 바꾼다.alert(&..." }, { "title": "모던 자바스크립트 #2.8. 기본 연산자와 수학", "url": "/posts/modern-js-0208/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-07 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.8. 기본 연산자와 수학단항, 이항,. 피연산자 피연산자(operand; 인수(argument)): 연산자가 연산을 수행하는 대상. 단항(unary) 연산자: 피연산자를 하나만 받는 연산자 이항(binary) 연산자: 두 개의 피연산자를 받는 연산자거듭제곱 연산자 **거듭제곱 연산자(exponentiation operator)를 사용한 a ** b를 평가하면 a를 b번 곱한 값이 반환된다. 정수가 아닌 숫자에 대해서도 동작한다. 1/2를 사용하면 제곱근을 구할 ..." }, { "title": "모던 자바스크립트 #2.7. 형 변환", "url": "/posts/modern-js-0207/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-07 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.7. 형 변환함수와 연산자에 전달되는 값은 대부분 적절한 자료형으로 자동 변환된다. 이러한 과정을 형 변환(type conversion)이라고 한다. 전달받은 값을 의도를 갖고 원하는 타입으로 변환(명시적 변환)해 주는 경우도 형 변환이라고 할 수 있다.문자형으로 변환문자형으로 변환은 무언가를 출력할 때 주로 일어난다. String(value)을 사용하면 문자형으로 명시적 변환이 가능하다. 문자형으로의 변환은 대부분 예측 가능한 방식으로 일어난다.숫자형으로 변환수학..." }, { "title": "모던 자바스크립트 #2.6. alert, prompt, confirm을 이용한 상호작용", "url": "/posts/modern-js-0206/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-06 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.6. alert, prompt, confirm을 이용한 상호작용alert사용자가 확인 버튼을 누를 때까지 메시지를 보여주는 창이 떠있게 된다.모달창(modal window): 메시지가 있는 작은 창으로, modal이라는 단어에는 페이지 나머지 부분과 상호작용이 불가능하다는 의미가 내포되어 있다. 확인 버튼을 누르기 전까지는 모달 창 바깥의 행동을 할 수 없다.promptresult = prompt(title, [default]); title: 사용자에게 보여..." }, { "title": "모던 자바스크립트 #2.5. 자료형", "url": "/posts/modern-js-0205/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-06 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.5. 자료형자바스크립트의 변수는 자료형에 관계없이 모든 데이터일 수 있다. 자바스크립트는 자료의 타입은 있지만 변수에 저장되는 값의 타입은 언제든지 바뀔 수 있는 “동적 타입(dynamically typed) 언어”이다.숫자형(number type)숫자형은 정수 및 부동소수점 숫자(floating point number)를 나타낸다. 일반적이 숫자 외에 Infinity, -Infinity, NaN 같은 특수 숫자 값(special numeric value)가 포함된다..." }, { "title": "모던 자바스크립트 #2.4. 변수와 상수", "url": "/posts/modern-js-0204/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-05 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.4. 변수와 상수대다수 자바스크립트 애플리케이션은 사용자나 서버로부터 입력받은 정보를 처리하는 방식으로 동작한다. 변수는 이러한 정보를 저장하는 용도로 사용된다.변수(variable)데이터를 저장할 때 쓰이는 ‘이름이 붙은 저장소‘이다.let message; // &#39;message&#39; 이름을 가진 변수 생성(선언)message = &#39;Hello&#39;; // 할당연산자 =를 사용해 변수 안에 데이터 저장// 문자열이 변수와 연결된 메모리 영역에 저장..." }, { "title": "모던 자바스크립트 #2.3. 엄격 모드", "url": "/posts/modern-js-0203/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-05 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.3. 엄격 모드ECMAScript5(ES5)가 등장하기 전인 2009년까지는 기존 기능 변경 없이 새로운 기능이 추가되었다. 새롭게 정의된 ES5에서는 새로운 기능이 추가되고 기존 기능 중 일부가 변경되었다. 기존 기능을 변경하였기 때문에 하위 호환성 문제가 생길 수 있으므로 변경사항이 ES5 기본 모드에서는 활성화되지 않도록 설계되었다. 대신 use strict라는 특별한 지시자를 사용해 엄격모드를 활성화했을 때만 이 변경사항이 활성화되게 해 놓았다.use stri..." }, { "title": "모던 자바스크립트 #2.2. 코드 구조", "url": "/posts/modern-js-0202/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-04 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.2. 코드 구조statement문(statement)은 어떤 작업을 수행하는 문법 구조(syntax structure)와 명령어(command)를 의미한다.세미콜론줄바꿈이 있다면 세미콜론을 생랴가할 수 있다. 자바스크립트는 줄바꿈이 있으면 이를 ‘암시적’ 세미콜론으로 해석한다. 이런 동작 방식을 세미콜론 자동 삽입이라고 부른다. 세미콜론이 정말로 필요하지만 자바스크립트가 이를 추정하지 못하는 상황도 존재한다. 다음과 같다.alert(&quot;에러가 발생합니다.&qu..." }, { "title": "모던 자바스크립트 #2.1. Hello, world!", "url": "/posts/modern-js-0201/", "categories": "JavaScript", "tags": "JavaScript, modernJS", "date": "2021-01-04 00:00:00 +0800", "snippet": "모던 JavaScript 튜토리얼을 따라가면서 정리합니다.2.1. Hello, world!Node.js와 같은 서버 사이드 환경에서 스크립트를 실행하고 싶다면 node my.js와 같은 명령어를 사용하면 된다.script 태그script 태그를 이용하면 자바스크립트 프로그램을 HTML 문서 어느 곳에나 삽입할 수 있다. 브라우저는 이 태그를 만나면 안의 코드를 자동으로 처리한다.모던 마크업script 태그에는 요즘엔 잘 사용하지 않는 필수가 아닌 몇 가지 속성이 있다.type 속성HTML4와 달리 이젠 타입 명시가 필수가 아니..." }, { "title": "DEVIL: 알림 목록 요청을 비동기 요청으로 전환", "url": "/posts/devil-65/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-12-29 00:00:00 +0800", "snippet": "문제현재 프로그램에서는 /notification/list라는 특정 URL로 요청을 보냈을 때 서버가 알림 목록 페이지를 응답해준다. (#62 )그러나 UI 프로토타입에 의하면 알림 목록은 별개의 페이지가 아니라, 알림 아이콘을 클릭하였을 때 드롭다운 목록으로 출력되어야 한다.해결방법이를 위해서는 프론트단에서 서버로 비동기 요청을 해야 한다. View: 알림 아이콘에 클릭 이벤트가 발생하면 서버에 알림 목록에 대한 비동기 요청을 보낸다. Controller ajax.NotificationController: ..." }, { "title": "DEVIL: 알림 기능 구현", "url": "/posts/devil-62/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-12-22 00:00:00 +0800", "snippet": "요구사항다음과 같은 상황이 발생할 때 당사자에게 알림이 가도록 만든다. 유저 작성 게시글에 댓글이 달릴 경우 유저 작성 댓글에 대댓글이 달릴 경우 타유저가 유저를 팔로할 경우 유저가 뱃지를 획득했을 경우진행현황 DB 구조 변경: comment, follow, badge 테이블의 PK를 FK를 갖도록 변경한다. Notification 관련 Doman, Controller, Service, Dao, Mapper 파일을 만든다.알림 생성 및 저장 특정 상황이 발생했을 때 해당하는 알림을 생성하여 저장하도록 각 Servi..." }, { "title": "DEVIL: DispatcherServlet에 따른 비활성 상태의 데이터 추출 여부 변경", "url": "/posts/devil-61/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-12-20 00:00:00 +0800", "snippet": "문제app DispatcherServlet과 admin DispatcherServlet 모두 같은 Mapper 파일을 참조하고 있다. 그리고 Mapper에서는 활성여부를 판단하지 않고 모든 데이터를 select하고 있다. 그러나 app DispatcherServlet의 경우 DB에서 데이터를 가져올 때부터 비활성상태의 게시글, 태그, 유저, 댓글은 가져오지 말아야 한다. 이를 위해서는 list(), detail()와 같이 데이터를 가져오는 메서드에서 Map 객체를 파라미터로 넘겨주도록 바꿔야 한다. 그리고 Map 에는 type..." }, { "title": "DEVIL: 개인 피드 구현: 게시글 중복 문제", "url": "/posts/devil-58/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-12-17 00:00:00 +0800", "snippet": "문제마이페이지 피드에서 게시글 목록을 출력한다. 유저가 팔로우하는 태그를 사용한 게시글이거나, 팔로우하는 유저가 작성한 게시글이여야 한다. 게시글은 최신순으로 출력하고, 중복되어서는 안 된다.해결방법SQL에서 피드 목록을 출력할 때의 조건피드를 출력하기 위해서는 유저가 팔로우하는 태그를 사용하는 게시글 목록을 우선 select 하고, 유저가 팔로우하는 유저가 작성한 게시글 목록을 select해야 한다. 이때 함께 select하되 게시글은 중복되어서는 안 된다.시도했지만 실패한 방법 User가 팔로우하는 유저 목록과 ..." }, { "title": "DEVIL: DispatcherServlet을 admin과 app으로 분리", "url": "/posts/devil-57/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-12-16 00:00:00 +0800", "snippet": "이론ContextLoaderListener와 DispatcherServlet의 관계Tomcat Server는 WebApp을 시작할 때 ServletContextListener를 구현한 ContextLoaderListener를 클래스를 실행한다. ContextLoaderListener는 ApplicationContext를 구현한 IoC Container를 포함하고 있다. 그리고 이 IoC 컨테이너는 app-context.xml와 같은 bean 설정 파일을 읽고 해당하는 객체들을 찾아 생성하여 관리한다.DispatcherServl..." }, { "title": "DEVIL: 게시글 검색 시 태그 정보가 사라지는 문제", "url": "/posts/devil-49/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-12-15 00:00:00 +0800", "snippet": "문제다음과 같이 sql문을 작성하면 검색하는 태그 이외의 태그들은 걸러지고 검색 태그에 해당하는 레코드 한 줄만 들고 오는 문제가 있었다. select a.arno, a.title, a.content, a.cdt, a.cano, a.vw_cnt, a.state, u.uno, u.nick article_nick, u.photo article_photo, at.tno, t.name tag_name, ..." }, { "title": "DEVIL: UserDao의 책임을 분산: 유저 팔로잉 정보 select", "url": "/posts/devil-40/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-12-08 00:00:00 +0800", "snippet": "문제현재 User Model(service, dao)에서 팔로우 추가 및 삭제 기능을 처리하고 있다. 이 경우 loginUser 객체가 너무 비대해질 뿐만 아니라, 한 모델에 너무 많은 기능이 집중되어 유지보수가 어렵다는 문제점을 가지고 있다.해결방법Follow Model을 추가 생성하여 팔로우 관련 기능은 여기서 처리하도록 만든다. 특히 Servlet에서 로그인한 유저가 해당 태그/유저를 팔로우 했는지 여부는 FollowService를 찾도록 만든다. 이때 loginUser와 tag, user 정보를 파라미터로 넘겨준다. (..." }, { "title": "DEVIL: UserDao의 책임을 분산: 유저 팔로잉 정보 select", "url": "/posts/devil-29/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-12-04 00:00:00 +0800", "snippet": "문제현재 로그인한 유저가 팔로우하고 있는 태그 목록을 가져오는 일을 UserDao에서 조인해서 가져오고 있다. 태그 목록을 가져오는 일은 TagDao이 할 수 있도록 책임을 위임해야 할 필요가 있다. 그렇지 않으면 팔로우하고 있는 태그 여부만 태그 번호로 판단하면 되는 TagListServlet에서 이를 위해 tagNoList를 따로 생성해 user.getTags()를 반복문을 돌려 번호를 넣어주고 이를 contains 등의 메서드로 판단해야 한다.해결방법UserDao에서 지나치게 집중되어 있는 책임을 분산하여 유지보수가 용이..." }, { "title": "DEVIL: 태그 언팔로우 시 /tag/list로 redirect하는 문제", "url": "/posts/devil-28/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-12-04 00:00:00 +0800", "snippet": "문제/auth/loginUser/페이지에서 태그를 언팔로우했을 때, UserUnfollowTagServlet에서 /tag/list로 리다이렉트하고 있다. /user/unfollow를 호출한 페이지로 리다이렉트되도록 만들어야 한다.해결방법이전에는 UserUnfollowTagServlet에서 다음과 같이 고정된 URL 값을 주었다. 따라서 어떤 페이지에서 언팔로우를 하든 무조건 태그 목록 페이지로 리다이렉트되었다.response.sendRedirect(&quot;../tag/list&quot;);이를 해결하기 위해서는 리다이렉트되..." }, { "title": "학원 #93일차: Http 쿠키(Cookie), 세션(Session), MVC 아키텍처", "url": "/posts/201203-93/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-12-03 00:00:00 +0800", "snippet": "HTML 렌더러와 JavaScript 엔진HTML와 CSS 형식에 따라 화면으로 렌더링해주는 HTML 렌더러와 자바스크립트를 실행하는 JavaScript 엔진이라는 두 개의 핵심 부품이 있다.쿠키쿠키는 웹 서버가 웹 브라우저에게 맡기는 데이터이다. 응답할 때 응답 헤더에 포함시켜 보낸다. 웹브라우저는 응답헤더로 받은 쿠키 데이터를 보관하고 있다가 지정된 URL을 요청할 때 요청 헤더에 포함시켜 웹 서버에 쿠키를 다시 보낸다.쿠키 생성 이름과 값으로 생성한다. 쿠키의 유효기간을 설정하지 않으면 웹 브라우저가 종료될 때까지 유..." }, { "title": "HTML5 CSS3 웹 표준의 정석 #8장: CSS 박스모델", "url": "/posts/html5-css3-08/", "categories": "html5-css3", "tags": "html5-css3", "date": "2020-11-29 00:00:00 +0800", "snippet": "CSS 박스모델CSS와 박스 모델블록 레벨 요소와 인라인 레벨 요소블록레벨 요소는 태그를 사용해 요소를 삽입했을 때 혼자 한 줄을 차지하는 요소이다. 즉 해당 요소의 너비가 100%라는 의미이다. 너비나 마진, 패딩 등을 이용해 크기나 위치를 지정하려면 블록 레벨 요소여야 한다.인라인 레벨 요소는 줄을 차지하지 않는요소이다. 즉 화면에 표시되는 콘텐츠만큼만영역을차지하고 나머지 공간에는 다른요소가 올 수 있다. 블록 레벨 요소: &amp;lt;p&amp;gt;, &amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt..." }, { "title": "HTML5 CSS3 웹 표준의 정석 #7장: 색상과 배경을 위한 스타일", "url": "/posts/html5-css3-07/", "categories": "html5-css3", "tags": "html5-css3", "date": "2020-11-28 00:00:00 +0800", "snippet": "7-1. 웹에서 색상 표현하기16진수 표기법6자리의 16진수로 표시한다. 6자리는 #RRGGBB 형식으로 표시한다.rgb와 rbga 표기법0부터 255까지의 숫자로 표기한다. rgba에서 a(alpha)는 불투명도 값을 나타내는 것으로 0부터 1까지의 값 중에서 사용할 수 있다. 0은 투명한 것이고 1은 완전히 불투명한 것이다.hsl과 hsla 표기법hsl은 hue(색상), saturation(채도), lightness(밝기)를 나타낸다.hsl(&amp;lt;hue값&amp;gt;, &amp;lt;saturation값&amp;..." }, { "title": "학원 #89일차: 로그인과 사진 업로드 구현", "url": "/posts/201127-89/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-27 00:00:00 +0800", "snippet": "PMS 프로젝트이전 버전: 로그인 기능 구현 복습이전에는handler 패키지의 LoginCommand에서 로그인 기능을 구현했다. 로그인을 구현하기 위해서는 세션을 다뤄야 한다. 세션은 클라이언트 전용 정보를 다루는 클라이언트 전용 보관소이다. 로그인 기능을 구현하기 전에는 모든 정보를 context 맵에 저장하였지만 context는 모든 클라이언트가 공유하기 때문에 클라이언트 전용 정보를 다루는 Session이 필요했다.이때 클라이언트와 서버 간의 프로토콜을 변경했다. 클라이언트는 무조건 요청을 할 때 세션 아이디를 요청 명..." }, { "title": "학원 #88일차: 서블릿 프로그래밍", "url": "/posts/201126-88/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-26 00:00:00 +0800", "snippet": " com.eomcs.web.ex04클라이언트가 보낸 데이터 읽기GET 요청 데이터 읽기 웹 브라우저에 URL을 입력한 후 엔터를 치면 GET 요청이다. 웹 페이지에서 링크를 클릭하면(자바스크립트 처리하지 않은 상태) GET 요청을 보낸다. 웹 페이지의 폼(method=’GET’일 때)에서 전송 버튼을 클릭하면 GET 요청을 보낸다.@WebServlet(&quot;/ex04/s1&quot;)public class Servlet01 extends GenericServlet { private static final lon..." }, { "title": "학원 #87일차: HTML 태그 사용법", "url": "/posts/201125-87/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-25 00:00:00 +0800", "snippet": " HTML/CSS 학습법: 결과 화면 먼저 보고 소스코드를 확인하자UI와 UX UX(User Experience; 사용자 경험): 사용자 편의성 ex: 링크에 hover했을 때 커서가 손모양으로 바뀌어야 한다. UI(User Interface): 기능을 하는 화면이 있는가 HTML 선언: &amp;lt;!DOCTYPE html&amp;gt; 태그는 계층구조로 되어 있다. 시작태그와 끝태그라고 하고, 태그 사이의 내용은 HTML 콘텐츠라고 한다. &amp;lt;head&amp;gt; 태그와 ..." }, { "title": "학원 #86일차:서블릿 프로그래밍, 프로젝트를 WAS 아키텍처로 전환", "url": "/posts/201124-86/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-24 00:00:00 +0800", "snippet": "서블릿 컨테이너가 관리하는 컴포넌트는 서블릿, 필터, 리스너로 3가지이다.Servlet 만들기1. javax.servlet.Servlet 인터페이스 구현//@WebServlet(&quot;/ex01/first&quot;)public class Servlet01 implements Servlet { ServletConfig config; public Servlet01() { System.out.println(&quot;Servlet01()&quot;); } @Override public void init(Servl..." }, { "title": "DEVIL: mysql의 datatime 타입과 java.util.Date 클래스", "url": "/posts/devil-03/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-11-23 00:00:00 +0800", "snippet": "문제Article의 cdt 컬럼(datetime)에 해당하는 도메인 객체의 필드는 어떤 타입으로 지정해야 할까? 다시 말해, 컬럼의 타입이 datetime일 때는 해당 도메인 객체의 타입을 어떻게 지정하는 것이 좋을까? java.sql.Date 의 경우 시간 정보가 저장되지 않는다. Java.sql.Time의 경우 날짜 정보가 저장되지 않는다. java.lang.String 의 경우 잘못된 형식의 날짜 데이터가 들어갈 가능성이 있다.해결방법mysql의 datetime 타입에 해당하는 프로퍼티 타입은 java.sql.Date를 ..." }, { "title": "학원 #85일차:서블릿 프로그래밍, WAS, JavaEE와 Servlet 컨테이너, Servlet 인터페이스의 Life-cycle 메서드", "url": "/posts/201123-85/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-23 00:00:00 +0800", "snippet": "서블릿 프로그래밍 웹 애플리케이션 서버 아키텍쳐의 개념 JavaEE와 Servlet API의 관계 JavaEE 구현체와 서블릿 컨테이너의 관계 eomcs-web-project/src-00 예제 실습 Servlet 인터페이스와 Life-cycle 메서드WAS(Web Application Server) 아키텍처이전까지는 사용자가 본인의 컴퓨터에 앱을 설치하고 그 앱에서 공통의 DBMS에 접근하여 데이터를 수정, 변경, 조회, 삭제했다. 그러나 이렇게 각각 앱을 설치한다면, 앱에 기능이 추가될 때마다 사용자들이 재설치를 해..." }, { "title": "HTML5 CSS3 웹 표준의 정석 #6장: 텍스트 관련 스타일", "url": "/posts/html5-css3-06/", "categories": "html5-css3", "tags": "html5-css3", "date": "2020-11-22 00:00:00 +0800", "snippet": "6-1. 글꼴 관련 스타일font-family 속성: 글꼴 지정하기텍스트 글꼴을 웹문서에서 지정한다고 해도, 사용자의 시스템에 해당 글꼴이 설치되어 있지 않다면 브라우저 기본 값이 나타나거나 다른 글꼴로 표시된다. 따라서 웹 문서에서 글꼴을 지정할 때에는 지정한 글꼴이 없을 경우에 대비해 두 번째, 세 번째 글꼴을 지정해야 한다.사용자 대부부의 시스템에 설치되어 있어서 웬만하면 제대로 표시되는 글꼴을 기본 글꼴(web-safe font)이라고 한다. 윈도우의 경우 영문은 sans-serif와 serif체, 한글은 굴림, 궁서,..." }, { "title": "DEVIL: 프로그래머스 채용공고 크롤링", "url": "/posts/devil-02/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-11-19 00:00:00 +0800", "snippet": "변경사항 사람인의 채용공고의 경우 채용공고 게시글의 내용이 이미지 파일인 경우가 많아, 텍스트로 가져오기가 힘들었다. 채용공고 내용이 텍스트로 되어 있고, 채용공고가 개발자 직군에 한정된 프로그래머스 사이트의 채용공고를 크롤링하기로 결정하였다. 채용공고 내용을 가져오기 위해 크롤링 사이트를 바꾼 만큼, 목록 페이지가 아니라 상세보기 페이지에 반복문을 돌며 접근해야 한다.기능추가1.사람인과 달리 한 페이지에서 원하는 만큼의 채용공고를 볼 수 없다. 따라서 우선 전체 목록을 순회하기 위해 마지막 페이지 번호(쪽수 번호)(사진..." }, { "title": "DEVIL: 사람인 채용공고 크롤링", "url": "/posts/devil-01/", "categories": "devil", "tags": "project, trouble-shooting, devil", "date": "2020-11-18 00:00:00 +0800", "snippet": "기능 추가 사람인 사이트의 개발자 채용공고를 크롤링하였다. 웹 문서의 HTML 요소를 객체화하여 원하는 데이터를 선택할 수 있게 만들어주는 Jsoup 라이브러리를 사용하였다. 개발자로 검색하였을 때의 주소에 있는 pageCount 값은 검색된 채용공고 게시글 수를 뜻한다. 사용자가 숫자를 입력하면 해당 숫자만큼의 채용공고를 크롤링해와 DBMS에 자동으로 저장하도록 만들었다.개선 필요 현재는 실제 채용공고 상세보기 페이지의 정보가 아니라, 채용공고 목록 페이지에 노출된 정보에만 접근할 수 있다. 따라서 채용공고의 내용 ..." }, { "title": "코어 자바스크립트 #5 자료구조와 자료형: Object.keys, values, entries", "url": "/posts/corejs-object-keys-values-entries/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-11-17 00:00:00 +0800", "snippet": "Object.keys, values, entrieskeys(), values(), entries()는 Map, Set, Array에 적용할 수 있다.일반 객체에는 다음과 같은 메서드를 사용할 수 있다. Object.keys(obj): 키가 담긴 배열을 반환한다. Object.values(obj): 값이 담긴 배열을 반환한다. Object.entries(obj): [key, value] 쌍이 담긴 배열을 반환한다.Map, Set, Array에 적용하는 메서드와 객체에 적용하는 메서드의 차이를 맵을 기준으로 비교하면 다음과 ..." }, { "title": "학원 #81일차: 비즈니스 로직 분리: 서비스 객체 도입", "url": "/posts/201117-81/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-17 00:00:00 +0800", "snippet": "논리적으로 어떤 객체에게 insert라는 일을 시키고, delete이라는 일을 시킬 지를 정하는 것을 논리적으로 전개를 해야 한다. 이것을 묶어서 로직이라고 한다. 업무에 관련된 논리적인 지시를 Business Logic이라고 한다. 화면에 관련된 논리적인 지시는 Presentation Logic이라고 한다. DB에 어떻게 데이터를 넣고 뺄 것인지는 Persistance Logic이라고 한다.현재 구조에서 문제점은 한 객체가 너무 많은 일을 한다는 것이다. 예를 들어 ProjectDeleteCommand 같은 경우 사용자 입력..." }, { "title": "코어 자바스크립트 #5 자료구조와 자료형: 위크맵과 위크셋", "url": "/posts/corejs-weakmap-weakset/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-11-16 00:00:00 +0800", "snippet": "weakmap과 weakset자료구조 구성요소(객체의 프로퍼티, 배열의 요소, 맵이나 셋 구성 요소)도 자신이 속한 자료구조가 메모리에 남아있는 동안 도달 가능한 값으로 취급되어 메모리에서 삭제되지 않는다. (가비지 컬렉터의 대상이 되지 않는다) 자바스크립트 엔진은 도달 가능한 값을 메모리에 유지한다.let john = { name: &quot;John&quot; };let map = new Map();map.set(john, &quot;...&quot;);john = null; // 참조를 null로 덮어씀// map.ke..." }, { "title": "학원 #80일차: Proxy 패턴: Command의 트랜잭션 처리", "url": "/posts/201116-80/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-16 00:00:00 +0800", "snippet": "이번 수업시간에는 Mybatis에서 트랜잭션을 다루는 방법을 배웠다. 특히 기존 클래스의 코드를 손대지 않고 일부 기능을 변경하는 프록시 디자인 패턴을 적용하였다.실습 mini-pms-41-c-client1단계: 트랜잭션을 다루기 전에 프로젝트 상세 조회 기능을 변경한다.com.ecoms.pms.handler.ProjectDetailCommand프로젝트 정보 외에 작업 목록을 추가로 출력한다.TaskDao 인터페이스 변경: findAll(Msp&amp;lt;String, Object) 메서드를 변경한다.List&amp;lt;..." }, { "title": "HTML5 CSS3 웹 표준의 정석 #5장: CSS 기초", "url": "/posts/html5-css3-05/", "categories": "html5-css3", "tags": "html5-css3", "date": "2020-11-15 00:00:00 +0800", "snippet": "스타일과 스타일시트한 문서에서 반복해 쓰이는 스타일들을 모아 놓은 것을 ‘스타일 시트’라고 부른다.스타일을 사용하는 이유 웹 문서의 내용과 상관없이 디자인만 바꿀 수 있다. 다양한 기기에 맞게 탄력저그올 바뀌는 문서를 만들 수 있다.스타일 형식선택자 { 스타일속성: 속성값;} 선택자(selector): 앞으로 만들 스타일 규칙을 어디에 적용할 것인지 나타낸다. 중괄호 안에 들어가는 속성과 속성 값은 콜론으로 구분해 속성: 속성값과 같은 형식으로 표시하며, ;로 구분한다.스타일을 표기하는 방법파일 크기를 작게 만들기 위..." }, { "title": "모두의 네트워크 #6장: 전송 계층", "url": "/posts/network-for-everyone-06/", "categories": "network-for-everyone", "tags": "network-for-everyone", "date": "2020-11-14 00:00:00 +0800", "snippet": "전송 계층전송 계층은 신뢰할 수 있는 데이터를 순차적으로 전달하는 역할을 하므로 상위 계층들이 데이터 전달의 유효성이나 효율성을 신경 쓰지 않도록 한다. 데이터가 중복되거나 누락되지 않고 오류 없이 순서에 맞게 전송되도록 관리한다.전송 계층의 역할 전송 계층은 목적지에 신뢰할 수 있는 데이터를 전달하기 위해 필요하다. 오류를 점검하는 기능이 있다. 오류가 발생하면 데이터를 재전송하도록 요청한다. 전송된 데이터의 목적지가 어떤 애플리케이션인지 식별하는 기능도 있다. 전송계층의 특징은 신뢰성/정..." }, { "title": "HTML5 CSS3 웹 표준의 정석 #4장: 폼 관련 태그들", "url": "/posts/html5-css3-04/", "categories": "html5-css3", "tags": "html5-css3", "date": "2020-11-14 00:00:00 +0800", "snippet": "폼 관련 태그들1. 폼 만들기 폼(form): 사용자가 웹 사이트로 정보를 보낼 수 있는 모든 요소 아이디와 비밀번호 입력, 로그인 버튼, 회원가입 창 등 폼의 동작 방식 로그인할 때 아이디, 비밀번호를 입력을 하고 로그인 버튼을 클릭하면 사용자가 입력한 내용이 웹 서버로 보내진다. 서버는 자신이 가지고 있는 사용자 데이터베이스를 뒤져 사용자가 보내 온 아이디와 비밀번호가 서로 일치하는 정보인지 여부를 확인하고 그 결과를 브라우저에 보낸다. 폼과 관련된 작업: ..." }, { "title": "학원 #77일차: MyBatis 기본 문법 및 프로젝트에 적용", "url": "/posts/201111-77/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-11 00:00:00 +0800", "snippet": "MyBatis 문법 com.eomcs.mybatis.ex01Data Persistence Framework데이터의 영속성(지속성; 등록, 조회, 변경, 삭제)를 대신 처리해주는 프레임워크를 말한다. 퍼시스턴스 프레임워크를 사용하면 JDBC의 복잡함이나 번거로움 없이 간단한 작업만으로 데이터 베이스와 연동되는 시스템을 빠르게 개발할 수 있으며 안정적인 구동도 보장한다. Data Persistence Framework에는 SQL문장으로 직접 데이터베이스 데이터를 다루는 SQL Mapper와, 자바 객체를 통해 간접적으로 데이터베..." }, { "title": "학원 #76일차: 프로젝트에 MyBatis 적용: MyBatis가 join 결과를 다루는 방법, 프로그램에서 사용하는 객체를 listener에서 준비시키기, sqlSessionFactory 공유,", "url": "/posts/201110-76/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-10 00:00:00 +0800", "snippet": "지난 시간에는 BoardDaoImpl에 Mybatis를 일부 적용하였다. BoardDaoImpl의 SQL을 뜯어내어 BoardMapper.xml로 옮기고, JDBC 코드를 Mybatis 클래스로 대체하였다. 그리고 mybatis-config.xml에 BoardMapper 파일의 경로를 등록하였다.오늘 수업에서는 MemberDaoImpl과 ProjectDaoImpl, TaskDaoImpl도 SLQ을 뜯어내어 XxxMaper.xml로 옮기고, JDBC 코드를 Mybatis 클래스로 대체하였다. 다만 BoardDaoImpl과 다..." }, { "title": "학원 #75일차: Chain of Responsibility 패턴, Persistance 프레임워크 MyBatis", "url": "/posts/201109-75/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-11-09 00:00:00 +0800", "snippet": "CommandFilterManager 변경이전 수업에서는 Chain of Responsibility 패턴을 적용해 CommandFilter, CommandFilterManager, FilterChain을 만들었다. 이번 수업에는 CommandFilter 구현체를 관리하고 실행하는 역할을 하는 CommandFilterManager 를 LinkedList 구조로 바꾸었다.Chain of Responsibility 패턴 작업 요청을 받은 객체(sender)가 작업자(receiver)에게 그 책임을 위임하는 구조에서 사용하는 설계..." }, { "title": "모두의 네트워크 #4장: 데이터 링크 계층", "url": "/posts/network-for-everyone-04/", "categories": "network-for-everyone", "tags": "network-for-everyone", "date": "2020-11-02 00:00:00 +0800", "snippet": "랜에서 데이터 전송하기데이터 링크 계층의 역할과 이더넷 이더넷은 랜에서 데이터를 정상으로 주고받기 위한 규칙이다. 이더넷은 데이터 충돌을 막기 위한 규칙으로 CSMA/CD 방식을 사용한다. CSMA/CD에서 CS는 데이터를 보내려고 하는 컴퓨터가 케이블에 신호가 흐르고 있는지 확인하는 규칙, MA는 케이블에 데이터가 흐르고 있지 않으면 데이터를 보내도 된다는 규칙, CD는 충돌이 발생하고 있는지 확인하는 규칙이다.MAC의 주소와 구조 MAC 주소는 48비트 숫자로 구성되어 있다. 그중 앞쪽 24비트는 랜 카드를 만든 제..." }, { "title": "러닝 자바스크립트 #3장: 자바스크립트 개발 도구", "url": "/posts/learning-js-03/", "categories": "learning-js", "tags": "learning-js, javascript", "date": "2020-11-01 00:00:00 +0800", "snippet": "리터럴과 변수, 상수, 데이터타입0과 1만으로는 일을 할 수 없고, 우리에게 익숙한 형태인 숫자와 텍스트, 날짜 등을 다뤄야 한다. 이런 것을 data type이라고 한다.3.1 변수와 상수변수 이름이 붙은 언제든지 바뀔 수 있는 값 초깃값을 할당하지 않으면 undefined가 할당된다. let 문 하나에서 변수 여러 개를 선언할 수 있다.상수 ES6에서 새로 생겼다. 변수와 마찬가지로 값을 할당받을 수 있지만, 한 번 할당한 값을 바꿀 수 없다. 보통 대문자와 밑줄만 사용한다.3.2 변수와 상수 중 어떤 것을 사용..." }, { "title": "HTML5 CSS3 웹 표준의 정석 #3장: 이미지와 하이퍼링크", "url": "/posts/html5-css3-03/", "categories": "html5-css3", "tags": "html5-css3", "date": "2020-11-01 00:00:00 +0800", "snippet": "3. 이미지와 하이퍼링크이번 장에서 만든 이력서 결과물: http://hayeonkim.dothome.co.kr/3.1. 이미지웹에서 사용하는 이미지 형식 GIF(Graphic Interchange Form) 표시할 수 있는 색상 수가 최대 256가지 다른 이미지 파일에 비해 파일 크기가 작기 때문에 아이콘이나 불릿 등 작은 이미지에 주로 사용 투명한 배경이나 움직이는 이미지를 만들수 있다. JPG/JPEG(Joint Photopgraphic Experts Group) ..." }, { "title": "학원 #68일차: JDBC, JDBC Driver, CRUD 구현", "url": "/posts/201029-68/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-10-29 00:00:00 +0800", "snippet": "JDBCJDBC API와 MariaDB JDBC Driver JDBC API: java.sql패키지에 있는 인터페이스 MariaJDBC 드라이버: 인터페이스를 구현하고 이 클래스를 보조하기 위해서 만들어진 클래스들의 묶음 (org.mariadb.jdbc.) Driver&amp;lt;-Driver 드라이버 정보, 커넥션 준비 메서드 규칙 정의 Connection &amp;lt;- MariaConnection DBMS와 연결 Statement, Pre..." }, { "title": "모두의 네트워크 #3장: 물리계층", "url": "/posts/network-for-everyone-03/", "categories": "network-for-everyone", "tags": "network-for-everyone", "date": "2020-10-25 00:00:00 +0800", "snippet": "3장: 물리계층물리 계층의 역할과 랜 카드의 구조 전기 신호에는 아날로그 신호와 디지털 신호가 있다. 아날로그 신호는 전화 회선이나 라디오 방송에 사용되는 신호다. 네트워크를 통해 상대방에게 데이터를 전송할 때 0과 1의 비트열은 전기신호로 변환되어 전송된다. 상대방이 받은 전기 신호는 다시 0과 1의 비트열로 복원한다.케이블의 종류와 구조 트위스트 페어 케이블에는 UTP 케이블과 STP 케이블이 있다. UTP 케이블은 실드로 보호되어 있지 않아 노이즈의 영향을 쉽게 받는다. STP 케이블은 실드로 보호되어 있어 노..." }, { "title": "HTML5 CSS3 웹 표준의 정석 #2장: 텍스트 관련 태그", "url": "/posts/html5-css3-02/", "categories": "html5-css3", "tags": "html5-css3", "date": "2020-10-25 00:00:00 +0800", "snippet": "텍스트 관련 태그들 웹문서의 정보는 대부분 텍스트로 전달된다. 텍스트로 이루어진 정보는 수정이 편리하지만 양이 많을 경우 정보를 찾기 힘들다는 단점이 있다.텍스트를 블록으로 처리하는 태그 &amp;lt;hn&amp;gt;: 제목 표시 &amp;lt;p&amp;gt;: 단락 만들기 앞뒤에 줄바꿈이 있는 텍스트 덩어리 &amp;lt;br&amp;gt; 태그 두 개를 삽입하면 텍스트 단락이 생긴 것처럼 보이지만 실제로 웹 브라우저는 이것을 텍스트 단락으로 보지 않는다. &amp;lt;b..." }, { "title": "Do it! 자료구조와 함께 배우는 알고리즘 #5장: 재귀 알고리즘", "url": "/posts/doit05/", "categories": "do-it", "tags": "do-it, java", "date": "2020-10-25 00:00:00 +0800", "snippet": "재귀 알고리즘재귀의 기본재귀란?어떤 사건이 자기 자신을 포함하고 다시 자기 자신을 사용하여 정의될 때 재귀적(recursive)이라고 한다.예를 들어, 재귀적 정의(recursive definition)에 의해 무한으로 존재하는 자연수를 정의해보자. 1은 자연수이다. 자연수 n의 바로 다음 수도 자연수이다. 재귀는 병합 정렬과 퀵 정렬, 이진검색트리 등에 사용된다.재귀 호출은 ‘메서드 자신’을 호출하는 것이라고 이해하기보다는 자기 자신과 똑같은 메서드를 호출한다고 이해하는 것이 자연스럽다. 만약 진짜 메서드 자신을 호출하..." }, { "title": "학원 #61일차: 스레드풀의 구현과 사용, DBMS", "url": "/posts/201020-61/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-10-20 00:00:00 +0800", "snippet": "복습 stateful 스레드를 덜 생산하고 삭제한다. 따라서 가비지가 덜 생긴다 많은 클라이언트에 연결할 수 없다. stateless 클라이언트가 요청할 때 스레드를 생성해서 응답하면 스레드를 즉시 삭제 가비지가 많이 생성된다. stateless + thread pool 가비지를 줄인다 인스턴스 생성 시간을 줄인다. 스레드풀v36. 스레드풀 구현 스레드풀 스레드를 풀링 기법(pooling)을 ..." }, { "title": "HTML5 CSS3 웹 표준의 정석 #1장: HTML 기본 다지기", "url": "/posts/html5-css3-01/", "categories": "html5-css3", "tags": "html5-css3", "date": "2020-10-19 00:00:00 +0800", "snippet": "HTML과의 첫 만남 웹 편집기(web editor): 웹 문서를 작성하는 프로그램 웹 브라우저(web browser): 웹 문서를 보는 프로그램 HTML(HyperText Markup Language): 웹에서 자유롭게 오갈 수 있는 웹문서를 만드는 언어 HTML과 CSS 소스: 웹 브라우저 화면에 내용을 표시할 때 어떻게 해야 하는지 미리 정해 놓은 약속 HTML은 웹 표준 기술이다. 웹 표준은 각 브라우저에 맞게 사이트를 만들어야 하는 상황을 해결하기 위해 등장하였다. 웹 표준을 지켜 사..." }, { "title": "Do it! 자료구조와 함께 배우는 알고리즘 #4장: 스택과 큐(+ 링 버퍼)", "url": "/posts/doit04/", "categories": "do-it", "tags": "do-it, java", "date": "2020-10-19 00:00:00 +0800", "snippet": "스택 데이터를 일시적으로 저장하기 위한 자료구조로 LIFO: 가장 나중에 넣은 데이터를 가장 먼저 꺼낸다. 푸시와 팝을 하는 위치를 top이라고 하고, 스택의 가장 아랫부분을 bottom이라고 한다.실습4-1. IntStackpackage algorithm.doit.ch04;public class IntStack { private int max; // 스택 용량 private int ptr; // 스택 포인터 private int[] stk; // 스택 본체 // 실행 시 예외: 스택이 비어 있음 public ..." }, { "title": "학원 #60일차: 요구사항 분석(Use Case), Executors 태스크 프레임워크 - 스레드풀", "url": "/posts/201019-60/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-10-19 00:00:00 +0800", "snippet": "요구사항 분석 Use-Case(사용 사례): actor가 시스템을 사용하여 달성하려는 목표 이를 알려면 사용자(actor)가 누구인지 알아야 한다.Use case 식별 방법Use Case는 개발할 기능을 뜻한다. 버튼을 누르는 것도 기능이 맞긴 하지만, Use Case는 사용자의 목적에 집중한다. 즉 버튼을 사용자가 왜 누르는지, 한 단위의 업무 단위에 초점을 맞춘다. 다음은 Use Case 식별 방법이다. 1) (개발할) 시스템을 사용해서 처리하는 “업무” ex: 전화, 팩스 보내는 것은 업무이지만 시스..." }, { "title": "모두의 네트워크 #2장: 네트워크 기본 규칙", "url": "/posts/network-for-everyone-02/", "categories": "network-for-everyone", "tags": "network-for-everyone", "date": "2020-10-17 00:00:00 +0800", "snippet": "네트워크의 규칙 통신하기 위한 규칙을 프로토콜이라고 한다. 서로 이해하지 못하는 언어를 사용한다면, 이해 가능한 규칙을 정하여 대화할 수 있다.OSI 모델과 TCP/IP 모델OSI 모델 OSI 모델은 ISO(국제 표준화 기구)가 1977년에 정의한 국제 통신 표준 규약이다. 네트워크의 기본 구조를 7개 계층으로 나눠서 표준화한 통신 규약으로 현재 다른 모든 통신 규약의 기반이 된다. OSI 모델은 7계층으로 위에서부터 응용 계층, 표현 계층, 세션 계층, 전송 계층, 네트워크 계층, 데이터 링크 계층,..." }, { "title": "학원 #57일차: 네트워크 API를 활용한 C/S 아키텍처", "url": "/posts/201014-57/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-10-14 00:00:00 +0800", "snippet": "네트워크 API를 활용한 C/S 아키텍처클라이언트/서버 프로젝트 준비 git/eomcs-java-project/mini-pms-34-a-client/server데스크톱 애플리케이션 다른 애플리케이션과 연동하지 않고 단독적으로 실행한다. 보통 PC나 노트북에 설치해서 사용한다. MS-Word, Adobe Photoshop, 메모장 등Client/Server 애플리케이션 클라이언트는 서버에게 서비스나 자원을 요청하는 일을 한다. 서버는 클라이언트에게 자원이나 서비스를 제공하는 일을 한다.실습 1단계: 서버/클라이언트 ..." }, { "title": "학원 #56일차: PMS 프로젝트: Observer 패턴의 활용", "url": "/posts/201013-56/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-10-13 00:00:00 +0800", "snippet": "복습ApplicationContextListener는 다른 패키지에서도 공통으로 사용해야 하기 때문에 (특정 프로그램에 종속되지 않기 때문에) 회사 도메인 바로 아래에 둔다.package com.eomcs.pms.listener;import com.eomcs.context.ApplicationContextListener;public class AppInitListener implements ApplicationContextListener { @Override public void contextInitialized() { ..." }, { "title": "학원 #55일차: Observer 패턴", "url": "/posts/201012-55/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-10-12 00:00:00 +0800", "snippet": "Observer 디자인 패턴객체의 상태 변화에 따라 특정 작업을 수행하고 싶을 때 사용하는 패턴이다. 객체의 상태 변화를 관찰하는 observer(listener, subscriber)들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목목을 옵저버에게 통지하도록 하는 디자인 패턴이다. publish-subscribe 패턴이라고 하기도 한다. Observer(관찰자)라고는 하지만, 실제로 관찰할 방법이 없으니, Observer 객체를 가지고 있다가 그 객체의 메서드 호출을 통해 통지를 한다. 따..." }, { "title": ":book: 리팩토링 #4장: 테스트 작성", "url": "/posts/refactoring04/", "categories": "refactoring", "tags": "java, refactoring", "date": "2020-10-11 00:00:00 +0800", "snippet": "04. 테스트 작성 리팩토링을 실시하기 위한 필수 전제조건은 견고한 테스트를 해야 한다는 것이다. 적절한 테스트를 작성하면 리팩토링 하지 않더라도 프로그래밍 속도가 월등히 빨라진다.자가 테스트 코드의 가치 테스트 코드를 작성하지 않으면 디버깅하는 시간에 더 많은 시간을 뺏길 수 있다. 버그 수정은 금방 끝나지만 버그를 찾는 데 시간이 오래 걸리기 때문이다. 모든 테스트를 완전히 자동화하고 각 클래스가 결과를 자체적으로 검사하게 하자. 테스트 코드 안에 예상 출력 결과를 넣고 비교하게 만들면 된다. 그렇게..." }, { "title": "러닝 자바스크립트 #2장: 자바스크립트 개발 도구", "url": "/posts/learning-js-02/", "categories": "learning-js", "tags": "learning-js, javascript", "date": "2020-10-11 00:00:00 +0800", "snippet": " git: 버전 컨트롤 도구 Node: 브라우저 밖에서 자바스크립트를 실행할 수 있게 하는 도구이다. npm: 노드와 함께 설치된다. 이 리스트의 다른 도구를 설치할 때 필요하다. Gulp: 반복적인 개발 작업을 자동화하는 빌드 도구. Grunt도 많이 쓰인다. Babel: ES6 코드를 ES5로 변환하는 트랜스 컴파일러 ESLint: 자주 하는 실수를 피하고 더 나은 프로그래머가 되도록 돕는 린트 프로그램1. ES6 사용하기 ES6는 실무에서는 아직 이르기 때문에 개발자가 ES6 코드를 ..." }, { "title": "핵심 자료구조와 알고리즘 #3장: ArrayList 클래스", "url": "/posts/data-structure03/", "categories": "data-structure", "tags": "data-structure, java", "date": "2020-10-11 00:00:00 +0800", "snippet": "ArrayList 클래스분할상환분석(amortized analysis) 알고리즘 분류법3.1 MyArrayList 메서드 분류하기get(int index)public E get(int index) { if (index &amp;lt; 0 || index &amp;gt;= size) throw new IndexOutOfBoundsException(); return array[index];}get 메서드에 있는 모든 것이 상수시간이므로 get 메서드는 상수 시간이다.set(int index, E element)public..." }, { "title": "이산수학 #9,10강: 보수의 표현 및 연산", "url": "/posts/discrete-mathematics0910/", "categories": "discrete-mathematics", "tags": "discrete-mathematics", "date": "2020-10-10 00:00:00 +0800", "snippet": "보수의 표현 3에 대한 7의 보수: 3 + n = 7 ∴ n=41의 보수(1’ complement) 표현 어떤 수 n과의 합이 1이 되는 수 (각 자리별로 합해서 1이 되는 수) 예: 2진수 00110101의 1의 보수 = 11001010 2의 보수(2’ complement) 표현 어떤 수 n과의 합이 2가 되는 수 예: 00110101~2~의 2의 보수 = 11001011 /*00110101구하는 방법 (1)11001010(1의 보수) + 1 =&amp;gt; 11001..." }, { "title": "Do it! 자료구조와 함께 배우는 알고리즘 #3장: 검색 (검색 알고리즘, 선형 검색, 이진 검색)", "url": "/posts/doit03/", "categories": "do-it", "tags": "do-it, java", "date": "2020-10-10 00:00:00 +0800", "snippet": "검색검색 알고리즘데이터 집합에서 원하는 값을 가진 요소를 찾아내는 알고리즘검색과 키 어떤 검색을 하더라도 특정 항목에 주목한다는 점은 검색하기의 공통점이다. 여기서 주목하는 항목을 키(key)라고 한다. 대부분의 경우에서 키는 데이터의 일부이다. 키 값을 지정하는 방법 키 값과 일치하도록 지정한다. 키 값의 구간을 지정한다. 키 값과 비슷하도록 지정한다. 배열에서 검색하기 검색 기법의 종류 배열 검색 선형 리스트 검색 이진검색트리 검..." }, { "title": "모두의 네트워크 #1장: 네트워크 첫걸음", "url": "/posts/network-for-everyone-01/", "categories": "network-for-everyone", "tags": "network-for-everyone", "date": "2020-10-09 00:00:00 +0800", "snippet": "1장: 네트워크 첫걸음1. 네트워크 구조 컴퓨터 간의 연결을 컴퓨터 네트워크라 부른다. 네트워크를 사용하면 컴퓨터 간의 데이터 전송, 웹 사이트 열람, 메일 송 수신을 할 수 있다. 인터넷은 전 세계의 큰 네트워크부터 작은 네트워크까지 연결하는 거대한 네트워크다. 패킷은 컴퓨터 간의 데이터를 주고받을 때 네트워크를 통해 흘러가는 작은 데이터 조각을 말한다. 큰 데이터는 작은 패킷으로 분할한다. 큰 데이터를 그대로 보내면 데이터가 네트워크의 대역폭을 너무 많이 차지(점유)해서 다..." }, { "title": "러닝 자바스크립트 #1장: 첫 번째 애플리케이션", "url": "/posts/learning-js-01/", "categories": "learning-js", "tags": "learning-js, javascript", "date": "2020-10-09 00:00:00 +0800", "snippet": "1장 첫 번째 애플리케이션브라우저 기반 프로그램 만들기 그래픽 라이브러리를 사용하기가 편리하다. 이벤트 주도 프로그래밍(event-driven programming)으로 자연스럽게 넘어가기 좋다.텍스트 에디터종류 텍스트 모드 에디터 vi/vim과 이맥스 익숙해지면 SSH 등으로 원격 컴퓨터에 접속한 상태에서도 익숙한 에디터로 파일을 편집할 수 있다. 창 모드 에디터 아톰, 서브라임 텍스트, 코다, 비주얼 스튜디오 등 기능 문법 하이라이트 프로..." }, { "title": "💻 HTTP #9: HTTP 컨텐츠 협상", "url": "/posts/network09/", "categories": "network", "tags": "network, http", "date": "2020-10-09 00:00:00 +0800", "snippet": "HTTP 컨텐츠 협상Content Negotiation이란 동일한 URI에서 리소스의 서로 다른 버전을 지원하기 위해 사용하는 메커니즘이다. 사용자 에이전트가 사용자에게 제일 잘 맞는 것이 무엇인지 명시할 수 있다.원칙클라이언트는 리소스의 URL을 사용해 리소스를 요청한다. 서버는 리소슬를 선택하기 위해 이런 URL을 사용하며 클라이언트에게 해당 리소스의 특정 프레젠테이션(리소스가 제공하는 변형)을 리턴한다.리소스가 URL을 통해 호출되었을 때 특정 프레젠테이션을 선택하는 방법은 Content Negotiation에 의해 결정..." }, { "title": "학원 #53일차: 계산기 Network App, 채팅 App, 스레드", "url": "/posts/201007-53/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-10-07 00:00:00 +0800", "snippet": "계산기 Network App13단계: HTTP 프로토콜 기반 애플리케이션 실행 웹 브라우저로부터 요청을 받아 응답한다. 요청 및 응답 프로토콜은 웹 기반 프로토콜인 HTTP를 사용한다. HTTP 요청에 대해 HTTP 응답을 수행한다. 서버에 요청하는 방법: 웹 브라우저에서 다음과 같이 URL을 입력 http://localhost/plus?a=100&amp;amp;b=200 ServerCalculatorServerpublic class CalculatorServer { public static ..." }, { "title": "학원 #52일차: 계산기 Network App 만들기, 스레드", "url": "/posts/201006-52/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-10-06 00:00:00 +0800", "snippet": "계산기 프로그램 만들기요구사항 계산기 서버와 클라이언트 만들기 구현 조건: 최소 +, -, *, % 연산자는 지원한다. 실행 예: 클라이언트가 계산기 서버에 접속한 후 계산기 서버에 오신 걸 환영합니다! &amp;lt;== 서버의 응답 계산식을 입력하세요! &amp;lt;== 서버의 응답 예) 23 + 7 &amp;lt;== 서버의 응답 계산식&amp;gt; 23 + 7 ..." }, { "title": "학원 #51일차: HTTP, URL, Base64", "url": "/posts/201005-51/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-10-05 00:00:00 +0800", "snippet": " com.eomcs.net.ex05connection-oriented연결 후 데이터 송수신 연결 후에 데이터를 송수신 하기 때문에 데이터 송수신에 대한 신뢰를 보장한다. TCP 통신 방법의 전형적인 예이다. FTP, Telnet, SMTP, POP3, HTTP클라이언트public class Client0110 { public static void mian(String[] args) { Socket socket = new Socket(&quot;localhost&quot;, 8888); System.out...." }, { "title": "이산수학 #8강: 수의 표현", "url": "/posts/discrete-mathematics08/", "categories": "discrete-mathematics", "tags": "discrete-mathematics", "date": "2020-10-04 00:00:00 +0800", "snippet": "신흥철 교수님의 이산수학 8강을 듣고 정리하였습니다.수의 종류자연수 N기수(base)를 b로 하는 수체계로, 양의 정수 nb n, b∈N이고, b&amp;gt;1, 0≤ai&amp;lt;b일 때 n=akbk+ak-1bk-1+…+a1b1+a0b0 (k: 자리수) 각각의 자릿수는 0이상 기수 미만: 10진수라면 각각의 자릿수는 0 이상 10미만이다.예제 4-1. 58910을 기수와 자리수로 표현하시오.58910=5×102+8×101+9×100정수양의 정수, 0, 음의 정수로 구성된 수 체계유리수 Qa, b∈Z(정수), a≠0일 ..." }, { "title": "핵심 자료구조와 알고리즘 #2장: 알고리즘 분석", "url": "/posts/data-structure02/", "categories": "data-structure", "tags": "data-structure, java", "date": "2020-10-04 00:00:00 +0800", "snippet": "알고리즘 분석프로파일링어떤 응용 프로그램에 어느 클래스가 좋을 지 결정하는 방법 중 하나로, 둘 다 시도해보고 얼마나 걸리는 지 알아보는 접근법문제점 알고리즘을 비교하려면 사전에 그것을 모두 구현해봐야 한다. 결과는 사용하는 컴퓨터의 성능에 의존한다. 한 알고리즘이 어떤 컴퓨터에서는 더 좋을 수 있지만, 다른 알고리즘은 다른 컴퓨터에서 더 좋을 수 있다. 결과는 문제 크기나 입력으로 사용하는 데이터에 의존하기도 한다.알고리즘 분석을 사용하여 이러한 문제점을 해결할 수 있다.알고리즘 분석(analysis of algorit..." }, { "title": "이산수학 #6강: 집합의 연산", "url": "/posts/discrete-mathematics06/", "categories": "discrete-mathematics", "tags": "discrete-mathematics", "date": "2020-10-03 00:00:00 +0800", "snippet": "신흥철 교수님의 이산수학 6강을 듣고 정리하였습니다.합집합과 교집합합집합(Union) A∪B집합 A, B에 대하여, A와 B에 모두 속하거나 두 집합 중 한 집합에 속하는 원소들로 구성된 집합A∪B={x|x∈A∨x∈B}Q3-12. 다음 집합 A, B, C의 합집합(A∪B∪C)은?A={a, b, c, d}, B={d, e, f, g, h}, C={c, d, e}답: A∪B∪C = {a, b, c, d, e, f, g, h}교집합(Intersection) A∩B집합 A, B에 대하여, A와 B에 모두 속하는 원소들로 구성된 집합A..." }, { "title": "이산수학 #5강: 집합", "url": "/posts/discrete-mathematics05/", "categories": "discrete-mathematics", "tags": "discrete-mathematics", "date": "2020-10-03 00:00:00 +0800", "snippet": "신흥철 교수님의 이산수학 5강을 듣고 정리하였습니다.집합의 개념정의 명확한 기준에 의해 분류되어 공통된 성질을 가지며 중복되지 않는 원소(element, member)의 모임표기방식 원소나열법: 집합에 포함되는 원소를 일일히 나열 A={1, 2, 3, 4, 5, 6, 7}={1, 2, 3, …, 7} 조건제시법: 원소의 공통 성질을 조건식으로 제시 A = {x|0&amp;lt;x&amp;lt;=7, x N} ※N(자연수) ⊂ Z(정수) ⊂ Q(유리수), I(무리수..." }, { "title": "Do it! 자료구조와 함께 배우는 알고리즘 #2장 기본 자료구조", "url": "/posts/doit02/", "categories": "do-it", "tags": "do-it, java", "date": "2020-10-03 00:00:00 +0800", "snippet": "Do it 자료구조와 함께 배우는 알고리즘 2장을 읽고 푼 연습문제 코드와 내용을 정리하였습니다.배열자료구조데이터 단위와 데이터 자체 사이의 물리적 또는 논리적 관계이다. 자료구조는 자료를 효율적으로 이용할 수 있도록 컴퓨터에 저장하는 방법을 말한다. 데이터 단위: 데이터를 구성하는 한 덩어리배열각 변수 이름을 ‘몇 번째’라고 지정할 때 사용하는 가장 기본적이고 간단한 자료구조이다. 배열은 같은 자료형의 변수로 이루어진 구성 요소(component)가 모인 것이다.int[] a; // 자료형이 int형인 배열a = new i..." }, { "title": "코어 자바스크립트 #2.12: null 병합 연산자 &#39;?&#39;", "url": "/posts/corejs0212/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-10-02 00:00:00 +0800", "snippet": "출처: https://ko.javascript.info/nullish-coalescing-operatornull 병합 연산자 ‘??’ 스펙에 추가된 지 얼마 안 된 문법입니다. 구식 브라우저는 폴리필이 필요합니다. 폴리필: 웹 개발에서 기능을 지원하지 않는 웹 브라우저 상의 기능을 구현하는 코드null 병합 연산자(nullish coalescing operator) ??를 사용하면 짧은 문법으로 여러 피연산자 중 그 값이 ‘확정되어있는’ 변수를 찾을 수 있다.a ?? b의 평가 결과 a가 null도 아니고 undefine..." }, { "title": ":book: 자바의 정석 #9.1: java.lang 패키지", "url": "/posts/textbook-0901/", "categories": "textbook", "tags": "textbook, java", "date": "2020-10-02 00:00:00 +0800", "snippet": "java.lang 패키지Object 클래스멤버변수는 없고 오직 11개의 메서드만 가지고 있다.메서드 protected Object clone() public boolean equals(Object ob) protected void finalize(): 객체가 소멸될 때 가비지 컬렉터에 의해 자동으로 호출된다. 이 때 수행되어야 하는 코드가 있을 때 오버라이딩한다. (거의 사용 안함) public Class getClass(): 객체 자신의 클래스 정보를 담고 있는 Class 인스턴스 반환 public int hashC..." }, { "title": "코어 자바스크립트 #2.11: 논리연산자", "url": "/posts/corejs0211/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-10-01 00:00:00 +0800", "snippet": "출처: https://ko.javascript.info/logical-operators논리 연산자자바스크립트엔 세 종류의 논리 연산자 ||(OR), &amp;amp;&amp;amp;(AND), !(NOT)이 있다. 연산자에 ‘논리’라는 수식어가 붙지만 논리 연산자는 피연산자로 불린형뿐만 아니라 모든 타입의 값을 받을 수 있다. 연산 결과 역시 모든 타입이 될 수 있다.|| (OR)전통적인 프로그래밍에서 OR 연산자는 불린값을 조작하는 데 쓰인다. 인수 중 하나라도 true이면 true를 반환하고, 그렇지 않으면 false를 반..." }, { "title": ":book: 자바의 정석 #8: 예외처리", "url": "/posts/textbook-0800/", "categories": "textbook", "tags": "textbook, java", "date": "2020-10-01 00:00:00 +0800", "snippet": "예외처리1.1 프로그램 오류 컴파일 에러: 컴파일 시에 발생하는 에러 오타, 잘못된 구문, 자료형 체크 등 기본적인 검사 컴파일 에러가 없을 경우 class 파일이 만들어져 실행 가능 런타임 에러: 실행 시에 발생하는 에러 에러: 프로그램 코드에 의해서 수습될 수 없는 심각한 오류 예외: 프로그램 코드에 의해서 수습될 수 잇는 다소 미약한 오류 논리적 에러: 실행은 되지만, 의도와 다르게 동작하는 것예외는 발새어하더라도 프로그래머가 이에 대한 적절한 ..." }, { "title": "💻 HTTP #8: HTTP 조건부 요청", "url": "/posts/network08/", "categories": "network", "tags": "network, http", "date": "2020-10-01 00:00:00 +0800", "snippet": "HTTP는 리소스들을 검사기 값을 이용해 비교함으로써 성공했을 지라도 요청의 결과가 변경될 수 있는 조건부 요청의 컨셉을 갖고 있다. 조건부 요청은 캐시를 갱신할 때, 다운로드를 이어할 때, 서버 상의 문서를 업로드/수정할 때 유용하다.원칙HTTP 조건부 요청은 특정 헤더 값에 의존하여 기존과는 다르게 실행되는 요청이다. 이 헤더들은 전제 조건을 정의하고 있는데, 요청의 결과는 전제 조건의 일치 여부에 따라 달라진다.조건부 요청은 요청 메서드 그리고 전제 조건을 위해 사용되는 헤더 집합에 의해 정의된다. GET과 같은 saf..." }, { "title": "코어 자바스크립트 #2.10: if와 &#39;?&#39;를 사용한 조건 처리", "url": "/posts/corejs0210/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-09-30 00:00:00 +0800", "snippet": "출처: https://ko.javascript.info/ifelseif와 ‘?’를 사용한 조건 처리조건에 따라 다른 행동을 취해야 할 때는, if문과 조건부 연산자 ?(물음표 연산자)를 사용하면 된다.‘if’문if(...)문은 괄호 안에 들어가는 조건을 평가하는데, 그 결과가 true이면 코드 블록이 실행된다.조건이 true일 때 복수의 문을 실행해야 한다면 중괄호로 코드 블록 감싸야 한다. 그러나 조건이 참일 경우 실행되는 구문이 단 한 줄이더라도 코드 가독성을 위해 중괄호 {}를 사용해 코드를 블록으로 감싸야 한다.불린형으..." }, { "title": ":book: 자바의 정석 #7.8: 내부클래스", "url": "/posts/textbook-0708/", "categories": "textbook", "tags": "textbook, java", "date": "2020-09-30 00:00:00 +0800", "snippet": "내부 클래스내부클래스는 GUI 어플리케이션(AWT, Swings 등)의 이벤트처리 외에는 잘 사용하지 않을 정도로 사용빈도가 높지 않다.내부 클래스란?두 클래스가 서로 긴밀한 관계에 있을 때 내부 클래스로 선언한다. 내부 클래스는 외부 클래스를 제외하고는 다른 클래스에서 잘 사용되지 않는 것이어야 한다.내부 클래스의 장점 내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다. 코드의 복잡성을 줄일 수 있다.내부 클래스의 종류와 특징변수의 선언위치에 따라 변수의 종류와 특징이 달리지는 것처럼. 내부 클래스도 마찬가지이..." }, { "title": "코어 자바스크립트 #2.8: 기본 연산자와 수학", "url": "/posts/corejs0208/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-09-29 00:00:00 +0800", "snippet": "출처: https://ko.javascript.info/operators기본 연산자와 수학연산자와 피연산자 피연산자(operand) 는 연산자가 연산을 수행하는 대상으로, 인수(argument)’라고 불리기도 한다. 단항(unary) 연산자: 피연산자를 하나만 받는 연산자 (ex: 부호를 반전하는 마이너스 단항연산자) 이항(binary) 연산자 : 두 개의 피연산자를 받는 연산자 (ex: 뺄셈을 하는 마이너스 이항연산자) 기호는 같지만 수행하는 연산이 다를 수 있다. 이 경우 피연산자의 개수로 연산자를 구분한다.거듭제곱..." }, { "title": "학원 #50일차: 자바 프로그램-운영체제-하드웨어 호출관계, 연결방식(Connectionful, Connectionless) 통신방식(Stateful, Stateless)", "url": "/posts/200929-50/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-29 00:00:00 +0800", "snippet": "어제 복습을 하다가 생긴 궁금증을 수업시간 전에 말씀드렸더니 감사히도 장장 1시간 동안 설명해주셨다. 컴퓨터 구조와 관련되어 있어 완벽히 이해하기는 어려웠지만 이해한 만큼 정리해보았다.질문net.ex03.Clinet0110의 out.write(100) 코드 위에 “실제 write()는 소켓의 내부 버퍼로 출력한다.”라는 주석이 있는데, 혹시 이것에 대해 설명해주실 수 있으신가요? Socket 클래스 소스코드에 setSendBufferSize()랑 getSendBufferSize() 메서드가 있긴 한데 실제 버퍼는 없는 것 같아..." }, { "title": "학원 #49일차: 네트워크 기초(IP, 랜카드, port fowarding, 패킷, DNS, ISP), Socket과 byte stream", "url": "/posts/200928-49/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-28 00:00:00 +0800", "snippet": "IPIPv4 프로토콜은 IP주소를 4byte로 표현한다. 따라서 약 46억개의 아이피 주소만을 사용할 수 있다. PC가 보급되기 이전까지는 충분했을 지 모르나 컴퓨터가 보급되면서 이 주소만으로 식별하기는 힘들어졌다. 따라서 공인 IP주소를 라우터에 부여하고, 라우터는 연결된 기기에 사설 IP 주소를 할당하는 방식으로 IPv4의 문제점을 해결하였다.   공인 IP (Public IP) 사설 IP (Private IP) 할당 주체 ISP(인터넷 서비스 ..." }, { "title": "이산수학 #4강: 증명", "url": "/posts/discrete-mathematics04/", "categories": "discrete-mathematics", "tags": "discrete-mathematics", "date": "2020-09-27 00:00:00 +0800", "snippet": "신흥철 교수님의 이산수학 4강을 듣고 정리하였습니다.증명의 정의공리 (Axiom) 별도의 증명 없이 참(T)으로 이용되는 명제 (무증명 명제) 예) 실수 a, b 에 대해 a=b이면 a + 1 = b + 1이다.정의 (Definition) 논의의 대상을 보편화하기 위해 사용하는 용어 또는 기호의 의미를 확실하게 규정한 문장이나 식 예) ‘명제’의 정의: 참이나 거짓으로 판별할 수 있는 문장/수식정리(Theorem) 공리와 정의((혹은 그 이전에 참으로 증명된 정리)를 통해 참으로 확인된 명제 예) ..." }, { "title": "이산수학 #3강: 변수를 포함한 명제와 한정자, 논리와 추론", "url": "/posts/discrete-mathematics03/", "categories": "discrete-mathematics", "tags": "discrete-mathematics", "date": "2020-09-27 00:00:00 +0800", "snippet": "신흥철 교수님의 이산수학 3강을 듣고 정리하였습니다.변수를 포함한 명제와 한정자 명제: 참과 거짓으로 판별할 수 있는 문장 / 수식 변수를 포함한 명제: 변수의 범위(한정자, Quantifier) 지정 필요 x + 1 &amp;gt;= 2 자체는 명제가 아니다. 그러나 변수의 범위를 어떻게 지정해주느냐에 따라서 명제가 될 수도 있고, 명제가 되지 않을 수도 있다. 예를 들어, x + 1&amp;gt;= 2 에서 x &amp;gt;=1 (참)이나 x &amp;lt; 1(거짓)로 변수의 범위를 한정시켜주..." }, { "title": "핵심 자료구조와 알고리즘 #1장: 인터페이스", "url": "/posts/data-structure01/", "categories": "data-structure", "tags": "data-structure, java", "date": "2020-09-27 00:00:00 +0800", "snippet": "리스트가 두 종류인 이유자바는 List인터페이스에 ArrayList와 LinkedList라는 두 가지 구현을 제공한다. ArrayList와 LinkedList는 모두 동일한 메서드를 제공한다. 그렇다면 이 클래스의 차이점은 무엇일까?이미지 출처: 한빛미디어ArrayList는 메모리에 요소가 나란히 붙어서 위치해있는다. 이렇게 나란히 있기 때문에 요소의 위치를 찾기가 매우 수월하다. 그러나 이러한 방식은 빈 공간을 허용하지 않기 때문에 중간에 요소를 제거될 경우 전체 요소가 빈 공간을 채우려 이동해야 한다. 마찬가지로 중간에 요..." }, { "title": "이산수학 #2강: 논리적 동치", "url": "/posts/discrete-mathematics02/", "categories": "discrete-mathematics", "tags": "discrete-mathematics", "date": "2020-09-26 00:00:00 +0800", "snippet": "신흥철 교수님의 이산수학 2강을 듣고 정리하였습니다.논리적 동치명제와 논리적 동치논리적 동치(Logical Equivalence) p ≡ q두 (합성)명제 p와 q의 진릿값이 서로 정확히 일치한다. p→q ≡ ¬p∨q ≡ ¬q→¬p ⇔ ¬(¬q)∨¬p ≡ q∨¬p p q ¬p p→q ¬p∨q ¬q ¬q→¬p T T F T T F T T F..." }, { "title": "이산수학 #1강: 명제", "url": "/posts/discrete-mathematics01/", "categories": "discrete-mathematics", "tags": "discrete-mathematics", "date": "2020-09-26 00:00:00 +0800", "snippet": "신흥철 교수님의 이산수학 1강을 듣고 정리하였습니다.이산수학 불연속을 다루는 수학이다. 1과 0을 다루는 수학이다. 1: 전원이 켜졌을 때, 참 0: 전원이 꺼졌을 때, 거짓 명제명제의 정의명제 (Proposition)참이나 거짓으로 구분할 수 있는 문장이나 수식(영어 소문자 p, q, r 등으로 표현) ex) 컴퓨터 가격은 비싸다. =&amp;gt; 명제가 아니다. 가치판단 개입 ex) x + 1 = 2 =&amp;gt; 명제가 아니다. ..." }, { "title": "Do it! 자료구조와 함께 배우는 알고리즘 #1장 기본 알고리즘", "url": "/posts/doit01/", "categories": "do-it", "tags": "do-it, java", "date": "2020-09-26 00:00:00 +0800", "snippet": "Do it 자료구조와 함께 배우는 알고리즘 1장을 읽고 푼 연습문제 코드와 내용을 정리하였습니다.알고리즘이란?문제를 해결하기 위한 것으로, 명확하게 정의되고 순서가 있는 유한 개의 규칙으로 이루어진 집합을 말한다. 순차적(concatenation) 구조: 여러 문장(프로세스)이 순차적으로 실행되는 구조 선택(selection) 구조: () 안에 있는 식의 평가 결과에 따라 프로그램의 실행 흐름을 변경하는 if문 System.int: 키보드와 연결된 표준 입력 스트림 stdIn: System.in에서 문자나 숫자를 꺼내..." }, { "title": "코어 자바스크립트 #2.7: 형변환", "url": "/posts/corejs0207/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-09-25 00:00:00 +0800", "snippet": "형 변환함수와 연산자에 전달되는 값은 대부분 적절한 자료형으로 자동 변환된다. 이런 과정을 “형 변환(type conversion)”이라고 한다. 이 외에, 전달받은 값을 의도를 갖고 원하는 타입으로 변환(명시적 변환)해 주는 경우도 형 변환이라고 할 수 있다alert가 전달받은 값의 자료형과 관계없이 이를 문자열로 자동 변환하여 보여주는 것이나, 수학 관련 연산자가 전달받은 값을 숫자로 변환하는 경우가 이에 해당한다.문자형으로 변환문자형으로 변환 은 문자형의 값이 필요할 때 일어난다. 주로 무언가를 출력할 때 주로 일어난다...." }, { "title": "학원 #48일차: JSON 형식, 네트워크", "url": "/posts/200925-48/", "categories": "", "tags": "", "date": "2020-09-25 00:00:00 +0800", "snippet": "mini pms v.32: JSON 형식으로 객체 읽고 쓰기데이터 교환: XML과 JSON데이터를 공급하는 쪽과 소비하는 쪽의 언어나 운영체제가 일치하지 않을 수 있다. 텍스트 형식은 운영체제나 프로그래밍 언어에 종속되지 않기 때문에 이기종 간 데이터를 주고받을 때 바이너리보다는 텍스트 형식을 사용한다. 또한 데이터를 교환할 때 데이터의 종류를 파악할 수 있도록 데이터 구조가 짜여 있어야 한다. (예: 날짜 데이터인지 온도 데이터인지 구분) 이때 데이터 교환을 하기 위해서 만들어진 언어가 XML이다.&amp;lt;습도&amp;..." }, { "title": "코어 자바스크립트 #2.6: alert, prompt, confirm을 이용한 상호작용", "url": "/posts/corejs0206/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-09-24 00:00:00 +0800", "snippet": "alert, prompt, confirm을 이용한 상호작용브라우저는 사용자와 상호작용할 수 있는 세 가지 함수를 제공한다. alert, prompt, confirm은 모두 모달 창을 띄워주는데, 모달 창이 떠 있는 동안은 스크립트의 실행이 일시 중단되고, 사용자가 창을 닫기 전까진 나머지 페이지와 상호 작용이 불가능하다. 모달 창의 위치는 브라우저가 결정하는데, 대개 브라우저 중앙에 위치한다. 모달 창의 모양은 브라우저마다 다르고, 개발자는 창의 모양을 수정할 수 없다.alert이 함수가 실행되면 사용자가 ‘확인(OK)’ 버튼..." }, { "title": "학원 #47일차: PMS 프로젝트 v31 - 파일 입출력", "url": "/posts/200924-47/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-24 00:00:00 +0800", "snippet": "mini pms v.3131-a: FileReader/FileWriterCharacter Stream Class를 활용하여 데이터를 텍스트 포맷으로 파일에 저장하고 파일에서 읽는 것을 연습할 것이다. 텍스트 형식으로 저장할 때 CSV 포맷으로 저장한다.character stream class 문자 데이터를 출력할 때 UCS2(UTF-16BE) 인코딩 문자를 UTF-8 등과 같은 다른 문자집합의 인코딩으로 자동 변환해준다. 문자 데이터를 읽을 때는 거꾸로 UTF-8 등으로 인코딩 된 데이터를 JVM이 내부적으로 사용하는 UC..." }, { "title": "💻 HTTP #7: HTTP 압축", "url": "/posts/network07/", "categories": "network", "tags": "network, http", "date": "2020-09-24 00:00:00 +0800", "snippet": "압축은 웹 사이트의 성능을 높여주는 방법 중 하나이다. 어떤 문서에 대해서는 70% 이상의 사이즈 축소로 대역폭 용량을 낮춰주는 효과를 가져다준다. 브라우저와 서버가 이미 압축 메커니즘을 잘 구현하고 있기 때문에, 웹 개발자는 구현할 필요 없이 서버가 잘 구성되어 있는지 확인만 하면 된다.압축은 세 개의 서로 다른 계층에서 이뤄진다. 먼저 일부 파일 형식이 최적화된 특유의 방법으로 압축 HTTP 계층에서 일반적인 암호화 HTTP 커넥션의 두 노드 사이의 커넥션 계층에서 압축이 정의된다.파일 포맷 압축각 데이터 타입은 내부..." }, { "title": "코어 자바스크립트 #2.2 엄격모드", "url": "/posts/corejs0203/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-09-23 00:00:00 +0800", "snippet": "엄격모드(strict mode)하위 호환성 문제자바스크립트는 오랫동안 기존의 기능을 변경하지 않으면서 새로운 기능이 추가되었기 때문에 하위 호환성 문제가 발생하지 않는 것이 장점이었다. 그러나 자바스크립트 창시자들의 실수나 불완전한 결정이 언어 안에 영원히 박제된다는 단점도 있었다.이에 새롭게 제정된 ES5에서는 새로운 기능이 추가되고 기존 기능 중 일부가 변경되었다. 기존 기능 변경 시 하위 호환 문제가 발생한다. 따라서 변경사항 대부분은 ES5의 기본 모드에선 활성화되지 않도록 설계되었다. 대신 use strict라는 특별..." }, { "title": "학원 #46일차: 미니 프로젝트와 파일 입출력 API: 바이트 스트림, 제네릭 메서드", "url": "/posts/200923-46/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-23 00:00:00 +0800", "snippet": "File Format데이터는 형식을 갖춰서 저장되어 있다.Binary 예시: jpeg, gif, wav, mp3, ppt FileInputStream과 FileOutputStream을 통해 데이터를 읽고 쓴다.Text 예시: txt, java, css, html, md FileReader, FileWriter를 통해 데이터를 읽고 쓴다. FileInputStream과 FileOutputStream도 사용을 할 수 있지만, 문자집합에 대해 신경을 써야 한다. 실행환경(이클립스,Unix: UTF-8, 윈도우: MS949)..." }, { "title": "💻 HTTP #6: HTTP 메시지", "url": "/posts/network06/", "categories": "network", "tags": "network, http", "date": "2020-09-23 00:00:00 +0800", "snippet": "HTTP 메시지HTTP 메시지HTTP 메시지는 서버와 클라이언트 간에 데이터가 교환되는 방식이다. 메시지의 타입은 요청(request)와 응답(response)로 나뉘어진다.메시지 특징 ASCII로 인코딩된 텍스트 정보이며 여러 줄로 되어 있다. HTTP 초기와 HTTP1.1의 메시지는 사람이 읽을 수 있었지만, HTTP/2에서는 최적화와 성능 향상을 위해 HTTP 프레임으로 나누어졌다. HTTP 메시지는 개발자 대신 소프트웨어, 브라우저, 프록시 혹은 웹 서버가 대신 작성해준다. 프록시, 서버의 경우 설정 파일을 통해..." }, { "title": "[JS] 코어 자바스크립트 #1.1: 자바스크립트란?", "url": "/posts/corejs0101/", "categories": "JavaScript", "tags": "JavaScript, corejs", "date": "2020-09-22 00:00:00 +0800", "snippet": "자바스크립트란?정의 자바스크립트는 ‘웹페이지에 생동감을 불어넣기 위해’ 만들어진 프로그래밍 언어이다. 자바스크립트로 작성한 프로그램을 스크립트(script) 라고 부른다. 스크립트는 웹페이지의 HTML 안에 작성할 수 있는데, 웹페이지를 불러올 때 스크립트가 자동으로 실행된다. 스크립트는 컴파일 없이 보통의 문자 형태로 작성할 수 있고, 실행도 할 수 있다.자바스크립트를 사용하는 이유 자바스크립트는 브라우저에서만 쓸 목적으로 고안된 언어이지만, 지금은 다양한 환경에서 쓰이고 있다. 브라우저뿐만 아니라 서버에서도 실행할..." }, { "title": "학원 #44일차: 파일 입출력: byte stream", "url": "/posts/200921-44/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-21 00:00:00 +0800", "snippet": "데이터 출력 eomcs.java.io.ex04int 입출력1바이트만 입출력FileOutputStream out = new FileOutputStream(&quot;temp/test3.data&quot;);int money = 1_3456_7890; // = 0x080557d2out.write(money); //항상 출력할 때는 맨 끝 1바이트만 출력한다. 위의 코드를 실행하여 출력한 데이터를 InputStream.read()로 읽는다. read()는 1바이트를 읽어 int 값으로 만든 후 리턴한다. F..." }, { "title": "학원 #43일차: 파일 입출력 API", "url": "/posts/200918-43/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-18 00:00:00 +0800", "snippet": "스트림   byte stream character stream 입력 InputStream Reader 출력 Reader Writer 이 클래스들은 모두 추상 클래스이다.   Input Output File FileInputStreamFileReader FileOutputStreamFileWriter ..." }, { "title": "학원 #41일차: 람다(Lambda)", "url": "/posts/200916-41/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-16 00:00:00 +0800", "snippet": "인터페이스프로그래밍을 하다보면 인터페이스가 등장하는데, 이럴 땐 호출 규칙에 따라서 호출하는 쪽, caller 프로그램을 짤 것인지, 호출될 프로그램, callee을 짤 것인지 파악해야 한다.caller를 만드는 입장다음 예제에서 Iterator는 인터페이스이다. ArrayList의 iterator() 메서드는 Iterator 인터페이스를 구현한 클래스의 객체를 만들어 리턴한다. main() 메서드에서는 이미 만들어진 Iterator 구현체를 Iterator 규칙(hasNext()와 next())에 따라 사용하고 있다.pu..." }, { "title": "학원 #40일차: 파일 입출력", "url": "/posts/200915-40/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-15 00:00:00 +0800", "snippet": "mini pms 프로젝트 v.30: 파일 입출력 API를 활용하여 데이터를 읽고 쓰기v.30-a: CSV 파일 포맷이전 버전까지 사용자가 입력한 데이터를 컬렉션 객체에 저장했다. 즉 RAM에 데이터가 저장되어 있어서 프로그램을 종료하거나 컴퓨터를 끄면 데이터가 지워지는 문제가 있었다. 프로그램을 종료하더라도 데이터가 지워지지 않게 하려면, 외부 저장장치(ex: 하드 디스크, SSD 등)에 저장해야 한다. 즉 데이터를 파일로 출력해야 한다.파일 입출력 API는 데이터를 파일로 입출력하는 다양한 도구(클래스, 인터페이스)를 제공한..." }, { "title": "학원 #39일차: 예외처리", "url": "/posts/200914-39/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-14 00:00:00 +0800", "snippet": "인터페이스란 객체 사용 규칙을 정의하는 문법이다. 인터페이스를 마주치면 누가 호출하고 누가 호출 당하는지 빨리 파악해야 한다. 그리고 우리가 호출당하는 프로그램을 짜는 입장인지, 호출 당하는 프로그램을 짜는 입장인지 빨리 파악해야 한다.나중에 배울 Servlet도 마찬가지이다. Servlet은 호출 규칙이고, 개발자는 호출 당하는 프로그램을 짜면 된다. 그러면 Tomcat Server와 같은 웹서버가 이를 호출하게 된다.mini pms v. 29: 예외처리현재 프로그램은 다음과 같이 잘못된 값을 입력하면 시스템이 다운된다. 이..." }, { "title": "💻 HTTP #5: HTTP의 진화", "url": "/posts/network05/", "categories": "network", "tags": "network, http", "date": "2020-09-13 00:00:00 +0800", "snippet": "HTTP의 진화월드 와이드 웹의 발명1990년에 팀 버너스 리에 의해 만들어졌다. TCP/IP 프로토콜 상에서 만들어진 월드 와이드 웹은 HTML, HTTP, 월드 와이드 웹이라고 불리는 브라우저, 문서에 접근하게 해주는 httpd의 초기 버전으로 구성되어 있다.HTTP/0.9: 원-라인 프로토콜HTTP 초기 버전은 매우 단순했다. GET이 유일한 메서드였고, 요청은 단일 라인으로 구성되어 있었다. 응답은 오로지 파일 내용으로 구성되었다. HTML 문서만이 전송 가능했다(HTTP 헤더 없음)GET /mypage.html&am..." }, { "title": "학원 #38일차: 익명 클래스, 커맨드 디자인 패턴, 상수 다루기", "url": "/posts/200911-38/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-11 00:00:00 +0800", "snippet": "anonymous class로컬 클래스 vs 익명 클래스로컬 클래스로 인터페이스 구현하기public class Exam0120 { interface A { void print(); } public static void main(final String[] args) { class My implements A { @Override public void print() { System.out.println(&quot;Hello!&quot;); } } A ob..." }, { "title": "학원 #35일차: 중첩 클래스: static nested class, inner class, local class", "url": "/posts/200908-35/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-08 00:00:00 +0800", "snippet": "클래스 종류에 따른 사용 범위스태틱 중첩 클래스와 내부 클래스가 접근 가능한 바깥 클래스 멤버top level class 패키지에 소속된 클래스를 top level class(패키지 멤버 클래스)라고 부른다. top level class의 접근 제한자 public: 다른 패키지에서도 접근 가능 (pakage-private): 다른 패키지에서 접근 불가 컴파일러는 public class의 이름과 소스 파일명이 일치해야 컴파일해준다. 한 소스파일의 top-level 클래스 중 오직 한 개의..." }, { "title": "학원 #34일차: iterator 디자인 패턴, static nested class", "url": "/posts/200907-34/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-07 00:00:00 +0800", "snippet": "오늘은 mini pms의 25 버전과 26-a 버전을 수행하였습니다. 25버전에서는 Iterator 디자인 패턴을 적용하고, 26-a 버전에서는 static nested class를 적용하였습니다.객체 사용: 이전 버전 리뷰객체가 다른 객체를 사용한다는 것은 다른 객체의 메서드를 호출하다는 뜻이다. 클래스 이름으로 static 메서드를 호출하거나 인스턴스를 생성하여 인스턴스를 통해 메서드를 호출한다. 실무에서는 클래스와 인스턴스 모두 객체(Object)라고 부르기 때문에 문맥에 맞게 파악해야 한다.AbstractList를 레..." }, { "title": "[Java] 백준 #2440, 2441, 2442, 2443: 별찍기 - 3, 4, 5, 6", "url": "/posts/baekjoon2440-2441-2442-2443/", "categories": "algorithm", "tags": "algorithm", "date": "2020-09-07 00:00:00 +0800", "snippet": "2440번: 별찍기 - 3문제첫째 줄에는 별 N개, 둘째 줄에는 별 N-1개, …, N번째 줄에는 별 1개를 찍는 문제예제입력5예제출력***************풀이package com.monica.baekjoon;import java.util.Scanner;public class No2440 { public static void main(String[] args) { Scanner sc = new Scanner(System.in); int n = sc.nextInt(); for (int i = 0; i &a..." }, { "title": ":book: 자바의 정석 #7.7: 인터페이스", "url": "/posts/textbook-0707/", "categories": "textbook", "tags": "textbook, java", "date": "2020-09-06 00:00:00 +0800", "snippet": "인터페이스인터페이스란?일종의 추상클래스지만 보다 추상화 정도가 높아 몸통을 갖춘 일반 메서드 또는 멤버변수를 구성원으로 가질 수 없다. 오직 추상메서드와 상수만을 멤버로 가질 수 있다.인터페이스의 작성인터페이스 멤버 제약사항 모든 멤버변수는 public static final이어야 하며, 이를 생략할 수 있다. 모든 메서드는 public abstract이어야 하며, 이를 생략할 수 있다. 단, static 메서드와 default 메서드 예외 (JDK 1.8부터) 생략된 제어자는 컴파일 시에 컴파..." }, { "title": "Do it! 자료구조와 함께 배우는 알고리즘 #1 (1) 알고리즘이란?", "url": "/posts/doit0101/", "categories": "do-it", "tags": "do-it, java", "date": "2020-09-06 00:00:00 +0800", "snippet": "알고리즘이란?문제를 해결하기 위한 것으로, 명확하게 정의되고 순서가 있는 유한 개의 규칙으로 이루어진 집합을 말한다. 순차적(concatenation) 구조: 여러 문장(프로세스)이 순차적으로 실행되는 구조 선택(selection) 구조: () 안에 있는 식의 평가 결과에 따라 프로그램의 실행 흐름을 변경하는 if문 System.int: 키보드와 연결된 표준 입력 스트림 stdIn: System.in에서 문자나 숫자를 꺼내는 장치세 값의 최댓값Q1. 네 값의 최댓값을 구하는 m4 메서드 작성static int max4..." }, { "title": ":book: 자바의 정석 #7.6: 추상클래스", "url": "/posts/textbook-0706/", "categories": "textbook", "tags": "textbook, java", "date": "2020-09-05 00:00:00 +0800", "snippet": "추상클래스추상클래스란?미완성 메서드를 포함하고 있는 미완성 설계도이다. 추상 클래스로는 인스턴스를 생성할 수 없다. 다만 새로운 클래스를 작성하는 데 있어서 바탕이 되는 조상 클래스로 미가 있다. 추상 클래스는 추상 메서드를 포함하고 있다는 것을 제외하고는 일반 클래스와 다르지 않다. 생성자, 멤버변수, 메서드를 가질 수 있다.한편 추상 메서드가 없는 완성된 클래스라해도 추상 클래스로 지정할 수 있다. 이 경우 인스턴스를 생성할 수 없게 만든다는 의미가 있다.추상메서드선언부만 작성하고 구현부는 작성하지 않은 채로 남겨두는 메서..." }, { "title": ":book: 자바의 정석 #7.5: 다형성", "url": "/posts/textbook-0705/", "categories": "textbook", "tags": "textbook, java", "date": "2020-09-04 00:00:00 +0800", "snippet": "다형성다형성이란?객체지향개념에서 다형성이란 ‘여러 가지 형태를 가질 수 있는 능력’을 말한다. 자바에서는 한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록 함으로써 다형성을 프로그램적으로 구현하였다. 다시 말해, 조상클래스 타입의 참조변수로 자손 클래스의 인스턴스를 참조할 수 있도록 하였다. 참조변수의 타입은 참조할 수 있는 객체의 종류와 사용할 수 있는 멤버의 수를 결정한다. 참조변수가 사용할 수 있는 멤버의 개수는 인스턴스 멤버의 개수보다 같거나 적어야 한다. 따라서 조상타입의 참조변수로 자손..." }, { "title": "학원 #33일차: 인터페이스, 추상 클래스, 싱글톤", "url": "/posts/200904-33/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-04 00:00:00 +0800", "snippet": "인터페이스 사용법public interface A { void m1();}public interface B extends A { void m2(); }public interface C { void m3(); }public interface D { void m2(); void m4; }public interface D2 { int m3(); }위와 같이 인터페이스가 정의되어 있다고 하자. 어떻게 사용할 수 있을까?인터페이스 상속 서브 인터페이스는 수퍼 인터페이스의 메서드까지 모두 구현해야 한다. 인터페이스 레퍼런스는 인터페이..." }, { "title": ":book: 자바의 정석 #7.4: 제어자", "url": "/posts/textbook-0704/", "categories": "textbook", "tags": "textbook, java", "date": "2020-09-03 00:00:00 +0800", "snippet": "제어자제어자란?클래스, 변수 또는 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여한다. 하나의 대상에 대해서 여러 제어자를 조합해서 사용할 수 있다. 단, 접근 제어자는 한 번에 네 가지 중 하나만 선택해서 사용할 수 있다.제어자의 종류 접근 제어자: public, protected, default, private 그 외 제어자: static, final, abstract, native, transient, synchronized, volatile, strictfpstatic - 클래스의, 공통적인static이 붙은 ..." }, { "title": "학원 #32일차: 일반화, 추상 클래스와 메서드, 인터페이스", "url": "/posts/200903-32/", "categories": "bitcamp", "tags": "bitcamp, Java", "date": "2020-09-03 00:00:00 +0800", "snippet": "mini pms v22 - 상속상속 구현 방법상속(inheritance) 을 구현하는 방법에는 전문화와 일반화 두 가지가 있다.1. 전문화 기존 클래스의 기능을 그대로 활용할 수 있도록 연결하고, 여기에 새 기능을 추가하거나 기존 기능을 변경하여 좀 더 특수 목적의 서브 클래스를 만드는 기법이다. 마치 부모로부터 무언가를 물려 받는 것과 같아 상속 이라는 문법의 대표적인 기법으로 알려져 있다. 그래서 객체지향 프로그래밍의 상속을 얘기할 때는 대부분 전문화 를 가르킨다.2. 일반화 클래스들의 공통 분모를 추출하여 수퍼 클래..." }, { "title": "학원 #31일차: 연결리스트, 스택, 큐 자료구조", "url": "/posts/200902-31/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-02 00:00:00 +0800", "snippet": "v19. LinkedList 자료구조 사용하기LinkedList 란?연결 리스트 는 노드(node) 를 이용해 데이터와 데이터를 연결하는 방식으로 데이터 목록을 관리한다. 각각의 노드는 데이터와 다음 노드의 주소를 갖고 있다. 배열과 달리 데이터를 추가할 때 마다 노드를 늘리는 방식이기 때문에 메모리를 효율적으로 사용한다. 노드와 노드를 연결하는 방식이기 때문에 데이터의 삽입, 삭제가 빠르다. 배열의 비해 데이터 조회 속도는 느리다. 배열의 경우 인덱스를 통해 바로 데이터를 찾을 수 있지만, 연결 리스트에서는 노드의 ..." }, { "title": "학원 #30일차: CRUD, 제네릭문법", "url": "/posts/200901-30/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-09-01 00:00:00 +0800", "snippet": "미니 프로젝트 CRUD 완성v 18. CRUD어제는 mini pms 프로젝트에 detail() 메서드를 구현하는 것까지 했다. 오늘은 update()와 delete()를 추가하여 CRUD를 완성했다.CRUD란?CRUD 는 데이터의 생성(Create), 조회(Read/Retrieve), 변경(Update), 삭제(Delete)을 가리키는 용어이다. 관리 시스템에서 데이터 처리의 기본 기능이다.실습 내용게시글, 회원, 프로젝트, 작업 정보 각각에 대해 CRUD를 완성한다.1단계: java.util.ArrayList를 모방하여 Ar..." }, { "title": "학원 #29일차: 캡슐화와 접근제어, 다형성과 형변환, 제네릭, CRUD", "url": "/posts/200831-29/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-31 00:00:00 +0800", "snippet": "미니 프로젝트 CRUD 완성어제는 mini pms 프로젝트에 detail() 메서드를 구현하는 것까지 했다. 오늘은 update()와 delete()를 추가하여 CRUD를 완성했다.제네릭제네릭(Generic)이란?다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입 체크를 해주는 기능이다. 객체의 타입을 컴파일 시에 체크하기 때문에 타입 안정성을 높이고 형변환의 번거로움이 줄어든다.자바에서 제안하는 변수(타입 파라미터) 이름은 다음과 같다.T - typeE - elementK - keyV - valueN -..." }, { "title": "[JS] 생활코딩 #30: 재귀함수", "url": "/posts/js-egoing30-recursive-call/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-29 00:00:00 +0800", "snippet": "재귀함수패턴 정의: 자주 사용하는 로직의 구현 방법과 그것의 이름 장점 문제 해결 방법 습득 용이 해결 방법 논의 시 효율적인 의사소통 가능 재귀함수 자기 자신을 호출하는 함수를 말한다.예제function traverse(target, callback) { // 텍스트 노드 제외하고 element 노드만 출력 if(target.nodeType === Node.ELEMENT_NODE) { // 그 중 a 태그만을 출력 if (target.nodeName ..." }, { "title": "[JS] 생활코딩 #29: 참조", "url": "/posts/js-egoing29-reference/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-29 00:00:00 +0800", "snippet": "참조복제var a = 1;var b = a; // 변수 b 값에 변수 a의 값 복제b = 2;console.log(a); // 1참조var a = {&#39;id&#39;:1};var b = a; // 변수 b와 변수 a에 담긴 객체는 서로 같다.b.id = 2;console.log(a.id); // 2 복제는 파일을 복사하는 것이라면, 참조는 심볼릭 링크(바로가기)를 만드는 것과 비슷하다. 심볼릭 링크로 접근하면 컴퓨터는 심볼릭 링크에 저장된 원본의 주소를 참조해서 원본의 위치를 알아내고 원본에 대한 작업을 한다. 즉 원본..." }, { "title": "[JS] 생활코딩 #28: 데이터 타입", "url": "/posts/js-egoing28-datatype/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-29 00:00:00 +0800", "snippet": "데이터 타입데이터 타입의 종류 객체 객체 아닌 것: 원시 데이터 타입(primitive type) 숫자 불리언(true/false) null undefined 래퍼 객체 자바스크립트는 원시 데이터형을 객체처럼 다룰 수 있기 위한 객체, 래퍼 객체를 제공한다. 원지 데이터타입과 관련하여 필요한 기능을 객체지향적으로 제공할 수 있어진다. 종류: String, Number, Boolean (null, undefined X) 내부적으로 는 원시 데이터 타입이지만 관련된 작..." }, { "title": "걸스인텍: 협업에 반드시 필요한 Git? Github? (1)", "url": "/posts/girlsintech-git-github01/", "categories": "git", "tags": "git, seminar", "date": "2020-08-29 00:00:00 +0800", "snippet": "걸스인텍과 깃허브에서 진행한 &amp;lt;협업에 반드시 필요한 Git? GitHub?&amp;gt; 세미나를 듣고 내용을 정리하였습니다.Computational Thinking 사전적 정의:복잡한 문제를 효율적으로 다루고 해결하는 사고능력 프로그래밍: 그 내용을 바탕으로 step-by-step의 명령 작성1단계: 문제 분해 (decomposition) 문제가 되는 요소가 여러가지가 있을 수 있음 예): 웹 서비스 다운 하드웨어 문제 인터넷 문제 코드가 의존성을 가지고 있는 패키지(외..." }, { "title": ":coffee: [Java] 이것이 자바다 #5: 참조 타입", "url": "/posts/this-is-java-04/", "categories": "this-is-java", "tags": "this-is-java, Java", "date": "2020-08-28 00:00:00 +0800", "snippet": "참조 타입데이터 타입 분류 기본 타입 정수 타입 실수 타입 논리 타입 참조 타입 배열 타입 열거 타입 클래스 인터페이스 기본 타입과 참조 타입의 차이점: 저장되는 값이 무엇인지 기본 타입: 실제 값을 변수 안에 저장 참조 타입: 배열, 열거, 클래스, 인터페이스를 이용해서 선언된 변수는 메모리의 번지를 값으로 갖는다. 변수는 스택 영역에 생성되고 객체는 힙 영역에 생성된다. 스택 영역에 ..." }, { "title": ":book: 리팩토링 #2 (2): 리팩토링 개론", "url": "/posts/refactoring02/", "categories": "refactoring", "tags": "java, refactoring", "date": "2020-08-27 00:00:00 +0800", "snippet": "리팩토링이란? 리팩토링의 목적은 소프트웨어를 더 이해하기 쉽고 수정하기 쉽게 만드는 것이다. 리팩토링은 겉으로 드러나는 소프트웨어 기능에 영향을 주지 않는다. 성능 최적화는 기능이 변경되지 않는다는 점에서 리팩토링과 같지만, 속도를 빠르게 한다는 작업의 목적 리팩토링과 다르다. 따라서 코드가 알아보기 더 어려워지기도 한다.리팩토링 목적 소프트웨어 설계 개선 소프트웨어 이해 용이 버그 발견 용이 프로그래밍 속도 향상리팩토링이 필요한 상황 같은 작업을 3번째 반복하게 됐을 때 기능을 추가할 때 버그를 수정할 때 ..." }, { "title": "💻 HTTP #4: 교차 출처 리소스 공유(CORS)", "url": "/posts/network04/", "categories": "network", "tags": "network, http", "date": "2020-08-27 00:00:00 +0800", "snippet": "교차 출처 리소스 공유 (CORS)등장 배경동일 출처 정책 (SOP: Same-Origin Policy)원래 도메인이 다르면 요청을 주고받을 수 없게 하려는 게 웹브라우저의 주요 정책이었다. 동일출처정책은 어떤 출처(origin)에서 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 중요한 보안 방식이다, 출처가 같다는 것은 두 URL의 프로토콜, 호스트, 포트 세 개가 같다는 것을 말한다.크로스 도메인 (Cross Domain) 이슈 그러나 점점 웹사이트에서 할 수 있는 일이 많아지면..." }, { "title": "[JS] 생활코딩 #27: Object", "url": "/posts/js-egoing27-object/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-26 00:00:00 +0800", "snippet": "ObjectObject란? 객체의 가장 기본적인 형태를 가지고 있는 객체 아무것도 상속받지 않는 순수한 객체 자바스크립트에서 값을 저장하는 기본적인 단위 자바스크립트의 모든 객체는 Object 객체를 상속받는다. 따라서 모든 객체는 Object 프로퍼티를 가지고 있다. Object.prototype은 모든 객체가 사용할 수 있는 기능이다. 모든 객체가 공통적으로 사용해야 할 기능이 있다면 Object.prototype에 기능을 추가함으로써 목적을 달성할 수 있다. Object API 사용법//..." }, { "title": "[JS] 생활코딩 #26: 표준 내장 객체의 확장", "url": "/posts/js-egoing26-standard-built-in-object/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-26 00:00:00 +0800", "snippet": "표준 내장 객체의 확장표준 내장 객체(Standard Built-in Object)란? 자바스크립트가 기본적으로 가지고 있는 객체들을 말한다. 프로그래밍을 하는 데 기본적으로 필요한 도구이다. 프로그래밍: 언어와 호스트 환경이 제고애하는 기능들을 통해서 새로운 소프트웨어를 만들어내는 것 자바스크립트의 내장객체 Object Function Array String Boolean Number Math Date RegExp 다른..." }, { "title": ":coffee: [Java] 이것이 자바다 #4: 조건문과 반복문", "url": "/posts/this-is-java-03/", "categories": "Java", "tags": "Java", "date": "2020-08-26 00:00:00 +0800", "snippet": "조건문과 반복문switch문 변수가 어떤 값을 갖느냐에 따라 실행문이 선택된다. if문은 조건식의 결과가 true/false 두 가지 밖에 없기 때문에 경우의 수가 많아질 수록 else-if 를 반복적으로 추가해야 하므로 코드가 복잡해진다. 그러나 switch문은 변수의 값에 다라 실행문이 결정되기 때문에 같은 기능의 If문보다 코드가 간결하다. 괄호 안의 값과 동일한 값을 갖는 case가 없으면 default로 가서 실행문을 실행시킨다. default는 생략 가능하다. 괄호 안에 올 수 있는 것 정수..." }, { "title": "[Java] 백준 #2941: 크로아티아 알파벳", "url": "/posts/baekjoon2941/", "categories": "algorithm", "tags": "algorithm", "date": "2020-08-26 00:00:00 +0800", "snippet": "문제예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 다음과 같이 크로아티아 알파벳을 변경해서 입력했다. 크로아티아 알파벳 변경 č c= ć c- dž dz= đ d- lj lj nj nj š s= ž z= ..." }, { "title": "[Java] 백준 #1316: 그룹 단어 체커 (단계별 풀이)", "url": "/posts/baekjoon1316/", "categories": "algorithm", "tags": "algorithm", "date": "2020-08-26 00:00:00 +0800", "snippet": "문제그룹 단어란 단어에 존재하는 모든 문자에 대해서, 각 문자가 연속해서 나타나는 경우만을 말한다. 예를 들면, ccazzzzbb는 c, a, z, b가 모두 연속해서 나타나고, kin도 k, i, n이 연속해서 나타나기 때문에 그룹 단어이지만, aabbbccb는 b가 떨어져서 나타나기 때문에 그룹 단어가 아니다.단어 N개를 입력으로 받아 그룹 단어의 개수를 출력하는 프로그램을 작성하시오.입력첫째 줄에 단어의 개수 N이 들어온다. N은 100보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에 단어가 들어온다. 단어는 알파벳..." }, { "title": ":book: 리팩토링 #1 (1): 메서드 분해와 기능 재분배", "url": "/posts/refactoring01/", "categories": "book", "tags": "java", "date": "2020-08-25 00:00:00 +0800", "snippet": "리팩토링마틴 파울러의 “리팩토링: 코드 품질을 개선하는 객체지향 사고법”을 읽으면서 공부한 내용을 올립니다.첫 장은 주어진 프로그램 코드를 리팩토링하면서 전반적인 리팩토링의 유용성과 방법을 조망하는 챕터입니다.원본 프로그램 프로그램 개요: 고객이 대여한 비디오와 대여 기간을 표시한 후, 비디오 종류와 대여 기간을 토대로 대여료를 계산한다. 비디오의 종류는 일반물, 아동물, 최신물 세 종류이다. 대여료 계산과 더불어 내역을 바탕으로 적립 포인트도 계산되는데, 이 포인트는 비디오가 최신물인지 아닌지에 따라 달라진다.Movie 클..." }, { "title": "[Java] 백준 #16310: 다이얼", "url": "/posts/baekjoon16310/", "categories": "algorithm", "tags": "algorithm", "date": "2020-08-25 00:00:00 +0800", "snippet": "문제전화를 걸고 싶은 번호가 있다면, 숫자를 하나를 누른 다음에 금속 핀이 있는 곳 까지 시계방향으로 돌려야 한다. 숫자를 하나 누르면 다이얼이 처음 위치로 돌아가고, 다음 숫자를 누르려면 다이얼을 처음 위치에서 다시 돌려야 한다.숫자 1을 걸려면 총 2초가 필요하다. 1보다 큰 수를 거는데 걸리는 시간은 이보다 더 걸리며, 한 칸 옆에 있는 숫자를 걸기 위해선 1초씩 더 걸린다.상근이의 할머니는 전화 번호를 각 숫자에 해당하는 문자로 외운다. 즉, 어떤 단어를 걸 때, 각 알파벳에 해당하는 숫자를 걸면 된다. 예를 들어, U..." }, { "title": ":coffee: [Java] LinkedList 구현하기", "url": "/posts/MyLinkedList/", "categories": "Java", "tags": "Java", "date": "2020-08-25 00:00:00 +0800", "snippet": "MyLinkedList 만들기1단계: LinkedList 클래스 정의public MyLinkedList {}2단계: 값을 담을 노드 클래스 설계 Node의 인스턴스 필드와 생성자를 정의하자.public class MyLinkedList { static class Node { Object value; Node next; Node(){} Node(Object value) { this.value = value; } }}3단..." }, { "title": ":coffee: [Java] 이것이 자바다 #3: 연산자", "url": "/posts/this-is-java-02/", "categories": "Java", "tags": "Java", "date": "2020-08-24 00:00:00 +0800", "snippet": "연산자연산식 연산자와 피연산자를 이용하여 연산의 과정을 기술한 것 반드시 하나의 값을 산출한다. 따라서 하나의 값이 올 수 있는 곳이면 어디든지(변수에 저장되는 값 위치, 다른 연산식의 피연산자 위치) 값 대신에 연산식을 사용할 수 있다.연산 방향과 우선순위프로그램에서는 연산자의 연산 방향과 연산자 간의 우선 순위가 정해져 있다. 연산자 연산 방향 우선순위 증감(++, --), 부호(+, -), 비트(~), 논리(!) ← 높음 ..." }, { "title": ":coffee: [Java] 이것이 자바다 #2: 변수와 타입", "url": "/posts/this-is-java-01/", "categories": "Java", "tags": "Java", "date": "2020-08-23 00:00:00 +0800", "snippet": "리터럴 소스코드 내에서 직접 입력된 값을 리터럴이라고 부른다. 정수 리터럴, 실수 리터럴, 문자 리터럴, 논리 리터럴이 있다. 정수 리터럴을 저장할 수 있는 타입: byte, char, short, int, long 사실 리터럴은 상수(constant)와 같은 의미이지만 프로그램에서는 상수를 “값을 한 번 저장하면 변경할 수 없는 변수”로 정의하기 때문에 이와 구분하기 위해 “리터럴”이라는 용어를 사용한다.Java char 초기화와 String 초기화 구별// charchar c = null; ..." }, { "title": "[JS] 생활코딩 #25: prototype", "url": "/posts/js-egoing25-prototype/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-21 00:00:00 +0800", "snippet": "prototypeprototype 객체의 원형 함수는 객체이므로 생성자로 사용될 함수도 객체이다. 객체는 프로퍼티를 가질 수 있다. prototype이라는 프로퍼티는 그 용도가 약속되어 있는 특수한 프로퍼티이다. prototype에 저장된 속성들은 생성자를 통해서 객체가 만들어질 때 그 객체에 연결된다. 프로토타입 기반 프로그래밍: 객체지향 프로그래밍의 한 형태로 클래스가 없고, 클래스 기반 언어에서 상속을 사용하는 것과 다르게 객체를 원형(프로토타입)으로 하여 복제의 과정을 통해서 객체의 동작 방식을 다시 사용할 수 ..." }, { "title": "[JS] 생활코딩 #24: 상속", "url": "/posts/js-egoing24-inheritance/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-21 00:00:00 +0800", "snippet": "상속상속이란? 객체: 연관된 로직들로 이루어진 작은 프로그램 상속: 객체의 로직을 그대로 물려 받는 또 다른 객체를 만들 수 있는 기능 상속은 기존의 로직을 수정하고 변경해서 파생된 새로운 객체를 만들 수 있게 해준다.상속의 사용법객체의 로직을 물려 받는 또 다른 객체를 만들기function Person(name) { this.name = name;}Person.prototype.name = null;Person.prototype.introduce = function() { return &#39;My name ..." }, { "title": "[JS] 생활코딩 #23: 함수와 this", "url": "/posts/js-egoing23-this/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-21 00:00:00 +0800", "snippet": "this this는 함수 내에서 함수 호출 맥락(context)를 의미한다. 함수를 어떻게 호출하느냐에 따라서 this가 가리키는 대상이 달라진다. 함수와 객체의 관계가 느슨한 자바스크립트에서 this는 이 둘을 연결시켜주는 실질적인 연결점 역할을 한다.메서드 호출var o = { func : function() { if(o === this) { document.write(&quot;o === this&quot;); } }}o.func(); // o === this객..." }, { "title": "[Java] 백준 #2908: 상수", "url": "/posts/baekjoon2908/", "categories": "algorithm", "tags": "algorithm", "date": "2020-08-21 00:00:00 +0800", "snippet": "문제상근이는 수의 크기를 비교하는 문제를 내주었다. 첫째 줄에 상근이가 칠판에 적은 두 수 A와 B가 주어진다. 두 수는 같지 않은 세 자리 수이며, 0이 포함되어 있지 않다. 상수는 수를 거꾸로 읽는다. 상수의 대답을 출력하는 프로그램을 작성하라.풀이import java.util.Scanner;public class Main { public static void main(String[] args) { Scanner sc = new Scanner(System.in); int first = sc.nextInt(); ..." }, { "title": "[Java] 백준 #1152: 단어의 개수 (Java)", "url": "/posts/baekjoon1152/", "categories": "algorithm", "tags": "algorithm", "date": "2020-08-21 00:00:00 +0800", "snippet": "문제영어 대소문자와 띄어쓰기만으로 이루어진 문자열이 주어진다. 이 문자열에는 몇 개의 단어가 있을까? 이를 구하는 프로그램을 작성하시오. 단, 한 단어가 여러 번 등장하면 등장한 횟수만큼 모두 세어야 한다.풀이import java.util.Scanner;public class Main { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String str = sc.nextLine(); int count = 1; f..." }, { "title": "[JS] 생활코딩 #22: 전역객체", "url": "/posts/js-egoing22-global-object/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-20 00:00:00 +0800", "snippet": "전역객체란? 전역객체(global object)는 특수한 객체이다. 모든 객체는 전역객체의 프로퍼티이다. 모든 전역변수와 함수는 window 객체의 프로퍼티이다. 객체를 명시하지 않으면 암시적으로 window의 프로퍼티로 간주된다.function func() { alert(&#39;Hello?&#39;);}func(); //Hello?window.func(); //Hello?var o = {&#39;func&#39;:function(){ alert(&quot;Hello?&quot;);}}o.func();win..." }, { "title": "[JS] 생활코딩 #21: 생성자와 new", "url": "/posts/js-egoing21-constructor/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-20 00:00:00 +0800", "snippet": "생성자와 new 자바스크립트는 Prototype-based programming 언어이다. prototype-based programming이란? 객체지향 프로그래밍의 한 갈래이다. 클래스가 없고, 클래스 기반 언어의 상속과 달리 객체를 원형(프로토타입)으로 하여 복제의 과정을 통해 객체의 동작 방식을 다시 사용할 수 있다. 클래스리스, 프로토타입 지향, 인스턴스 기반 프로그래밍이라고도 한다.객체를 만드는 방법객체 만드는 방법1: 만드는 과정 분산var person = {}person.name = &#39;egoing&#3..." }, { "title": "[JS] 생활코딩 #20: 객체지향 프로그래밍", "url": "/posts/js-egoing20-oop/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-20 00:00:00 +0800", "snippet": "객체지향 프로그래밍객체지향 프로그래밍 더 나은 프로그램을 만들기 위한 프로그래밍 패러다임이다. 로직을 상태(state =&amp;gt; 변수)와 행위(behave =&amp;gt; 메서드)로 이루어진 객체로 만들고, 이 객체들을 레고 블럭처럼 조립해서 하나의 프로그램을 만드는 것이다. 객체를 만드는 것이다. 객체는 변수와 메서드를 그룹핑한 것이다.문법과 설계객체지향 프로그래밍 교육은 크게 문법과 설계로 구분된다.문법 객체지향을 편하게 할 수 있도록 언어가 제공하는 기능을 학습하는 것이다. 객체를 만드는 법..." }, { "title": "[JS] 생활코딩 #19: 함수호출", "url": "/posts/js-egoing19-function-call/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-20 00:00:00 +0800", "snippet": "함수호출function sum(arg1, arg2) { return arg1 + arg2;}// 함수를 호출하는 기본적인 방법sum(1,2);// 함수를 호출하는 특별한 방법sum.apply(null, [1,2]); 위에서 sum 함수는 Function이라는 객체의 인스턴스이다. 따라서 sum은 객체 Function이 가지고 있는 메서드 (apply(), call())를 상속받고 있고, 호출할 수 있다. apply() 첫 번째 인자: 함수가 실행될 맥락 두 번째 인자: 함수(sum())의 인..." }, { "title": "[JS] 생활코딩 #18: arguments", "url": "/posts/js-egoing18-arguments/", "categories": "JavaScript", "tags": "JavaScript", "date": "2020-08-20 00:00:00 +0800", "snippet": "arguments arguments라는 객체는 변수에 담긴 숨겨진 유사배열이다. 이 배열에는 함수를 호출할 때 입력한 인자가 담겨있다. arguments 안에는 사용자가 전달한 인자가 안에 들어가 있다. 이 객체를 통해서 사용자가 전달한 인자들에 접근할 수 있게 된다.function sum() { var i, _sum = 0; for (i = 0; i &amp;lt; arguments.length; i++) { document.write(i+&#39; : &#39;+arguments[i]+&#39;&..." }, { "title": "학원 #28일차: 인스턴스 멤버, 생성자, 캡슐화", "url": "/posts/200819-28/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-19 00:00:00 +0800", "snippet": "클래스 의존 관계 App입장에서는 MemberHandler, Project Handler는 의존객체이다. Project Handler 입장에서는 MemberHandler가 의존객체이다. MemberHandler가 컴파일되면 ProjectHandler가 컴파일된다. 서로 쌍방향으로 참조되면 크로스 레퍼런스로로 무한으로 컴파일이 된다. 쌍방향 레퍼런스를 쓸 수밖에 없는 상황이면? 인터페이스를 통해 간접적인 관계를 만들어주자. 물론 이것은 이론 상의 상황이고 요즘은 컴파일러가 좋아서 무한으로 컴파일되지는 않는다.v11 클..." }, { "title": "학원 #27일차: 자료구조(큐, 스텍, 반복자, HashSet, HashMap, Hashtable), 클래스 의존관계", "url": "/posts/200818-27/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-18 00:00:00 +0800", "snippet": "Data StructureQueue FIFO 큐가 비어있다면 null을 리턴한다. java.util.concurrent.ArrayBlockingQueue 사용하기Que 구현하기1단계: Queue를 구현하기 위해 기존에 작성한 MyLinkedList를 상속받는다.public class MyQueue extends MyLinkedList {}2단계: Queue의 값을 추가하는 offer(Object)를 정의한다.public boolean offer(Object e) { return add(e);}3단계: Queue에서 ..." }, { "title": "학원 #26일차: LinkedList 구현", "url": "/posts/200817-26/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-17 00:00:00 +0800", "snippet": "LinkedListArrayList vs LinkedList기능은 ArrayList와 같지만 내부적으로 다르다.ArrayList 메모리 고정 크기를 갖는다. 크기를 초과하면 새로 배열을 만들어야 하기 때문에 메모리 낭비가 심하다. 기존 배열은 가비지가 되기 때문에 가비지가 과다 생산된다. 속도 배열의 특징 상 인덱스를 이용하여 특정 항목을 찾을 때 속도 빠르다. 삭제할 때 이전 항목을 당겨와야 하기 때문에 속도가 느리다. 입력할 때 현재 항목을 ..." }, { "title": "💻 HTTP #3: 쿠키", "url": "/posts/network03/", "categories": "network", "tags": "network", "date": "2020-08-17 00:00:00 +0800", "snippet": "HTTP 쿠키HTTP 쿠키란?HTTP쿠키는 서버가 사용자의 웹 브라우저에 전송하는 작은 데이터 파일이다. 헨젤과 그레텔에서 주인공이 길을 지나며 남긴 빵 부스러기와 같다고 해서 붙여진 이름이다. 클라이언트는 그 데이터 파일을 저장해 놓았다가, 동일한 서버에 재 요청할 때 전송한다. 쿠키는 요청을 보낸 브라우저를 식별하는 데 주로 사용하며, 상태가 없는(stateless) HTTP 프로토콜에서 상태 정보를 기억시켜준다.쿠키의 목적 세션 관리(Session management) 서버에 저장해야 할 로그인, 장바구..." }, { "title": ":coffee: [Java] wrapper 클래스", "url": "/posts/wrapper-class/", "categories": "java", "tags": "java", "date": "2020-08-14 00:00:00 +0800", "snippet": "Wrapper Classwrapper 클래스란? 자바는 primitive data type의 값을 다룰 때 기본 연산자 외에 좀 더 다양한 방법으로 다루기 위해 primitive data type에 대응하는 클래스를 제공한다. primitive data를 포장하는 객체라고 해서 랩퍼(wrapper) 클래스라고 부른다. primitive data type의 값을 객체로 주고 받을 때 사용한다. 랩퍼 클래스가 없다면 데이터 타입에 따라 메서드를 따로따로 정의해야 한다.// 모든 객체를 받을 수 있다.void m1(..." }, { "title": ":coffee: [Java] String 클래스", "url": "/posts/string/", "categories": "java", "tags": "java", "date": "2020-08-14 00:00:00 +0800", "snippet": "java.lang.String String의 구조는 원래 char 배열이었으나, JDK9부터 byte 배열로 바뀌었다. 순수한 ISO-8859 로 되어있다면 각 글자를 1바이트로, ISO-8859에 해당하지 않는(한글 등) 문자가 하나라도 포함되어 있으면 2바이트로 저장한다. char 배열이었을 때는 어떤 언어든지 무조건 UTF-16(2바이트)으로 저장하였다. new String()을 하게 되면 hash값을 저장하기 위한 변수(int)와 byte 배열이 인스턴스 변수가 heap에 생성된다. 같은 문자열이 있는..." }, { "title": "💻 02. HTTP 캐싱", "url": "/posts/network02/", "categories": "network", "tags": "network", "date": "2020-08-14 00:00:00 +0800", "snippet": "HTTP 캐싱이전에 가져온 리소스를 로컬에 저장하고 클라이언트가 리소스를 요청할 때 해당 리소스를 응답하는 기술이다. 비용 절감, 성능 향상의 이점이 있다.캐시의 종류Private browser caches(사설 브라우저 캐시) 단일 사용자 브라우저 캐시가 사용자에 의해 HTTP를 통해 다운로드된 모든 문서들을 가지고 있다. 서버에 대한 추가적인 요청 없이 뒤로 가기, 앞으로 가기, 저장, 소스로 보기 등을 위해 방문했던 문서들을 만드는 데 사용된다. Shared proxy caches(공유..." }, { "title": "학원 #24일차: java.lang.Object 메서드", "url": "/posts/200813-24/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-13 00:00:00 +0800", "snippet": " com.eomcs.corelib.ex01객체지향 Actor: 어플리케이션이 동작하게 만드는 촉발점 요청하지도 않았는데 스스로 동작하는 경우: ex) 고객의 자산정보 자동으로 보냄 (지정된 시간이 있으면 보냄 ) 자신의 업무 중에서 사람, 사물, 개념을 application을 통해 관리하고 싶은 것. 그러려면 사람, 사물, 개념에 관련된 데이터를 정의해야 한다. 이렇게 일단 추상화를 하고 부가적인 문법(상속, 다형성, 캡슐화)을 통해서 프로그래밍이 필요하다.java.lang.Object클래스를 정의할 때 수퍼 클래스를 ..." }, { "title": "학원 #23일차: 다형성 문법(오버로딩, 오버라이딩), 캡슐화 문법", "url": "/posts/200812-23/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-12 00:00:00 +0800", "snippet": "객체지향적 관점1. 피연산자와 연산자의 관점 메서드 == 연산자 인스턴스 + 파라미터 == 피연산자 데이터에 대해서 연산을 가하는 개념2. 사람처럼 생각 주어 == 인스턴스, 동사 == 메서드 모든 객체들을 사람처럼 생각하고 다룬다. 메서드를 객체에게 명령을 내리는 것으로 생각한다. (인스턴스는 변수 덩어리이기 때문에 메서드는 명령일 뿐이다. 인스턴스 안에 메서드가 있는 것이 아니다!) 프로그램 자체가 하나의 이야기가 된다.오버로딩메서드 오버로딩// function prototype = method signatur..." }, { "title": "학원 #22일차: 상속과 다형성", "url": "/posts/200811-22/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-11 00:00:00 +0800", "snippet": " 객체지향에서 중요한 것을 클래스를 빨리 파악하는 것이다. 이 클래스가 다른 클래스와 어떤 관계를 맺는지, 어떤 일을 하는지, 그리고 어떤 멤버들이 있는지 파악한다. 메인 메서드는 프로그램의 진입점(entry point)이다. 따라서 메인 메서드의 접근자는 항상 public이어야 한다. 메인 메서드가 없으면 프로그램을 시작할 수 없다. CRUD대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능 4가지를 묶어서 일컫는 말이다. 이러한 4개 조작을 모두 할 수 없다면 그 소프트웨어는 완전하다고 할..." }, { "title": ":coffee: [Java] 클래스 로딩 과정", "url": "/posts/class-loading-order/", "categories": "java", "tags": "java", "date": "2020-08-11 00:00:00 +0800", "snippet": "클래스 로딩이란?외부 저장장치(ex: HDD, USB 메모리, DVD-ROM 등)에 있는 .class 파일을 JVM이 관리하는 메모리로 로딩하는 것을 말한다. 클래스는 클래스의 코드를 사용하는 시점에 메모리(Method Area 영역)에 로딩된다. 스태틱 멤버를 사용할 때, new 명령으로 인스턴스를 생성할 때가 이 시점에 해당된다. 클래스는 한번 로딩되면 프로그램이 종료될 때까지 유지한다.클래스 로딩 과정 클래스를 외부 저장소에서 내부 저장소인 RAM으로 로딩한다. 정확하게는 클래스 파일을 JVM의 Method Area에 ..." }, { "title": "학원 #21일차: 생성자와 인스턴스/클래스 메서드의 활용", "url": "/posts/200810-21/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-10 00:00:00 +0800", "snippet": "생성자 활용자바에서 제공하는 클래스를 사용하여 생성자의 활용을 이해해보자. 자바는 인스턴스 변수를 초기화시키기 위해 여러 개의 생성자를 만들어 제공한다. 필요에 맞는 적절한 생성자를 호출하여 인스턴스를 초기화시킨 후 사용해야 한다.java.lang.String: 문자코드표String 인스턴스 초기화 방법 문자열 리터럴을 사용 char 배열을 사용 byte 배열을 사용 (한글 주의!)단, 한글 문자 코드의 바이트 배열을 가지고 String 인스턴스를 초기화시킬 때는 주의해야 한다. String 클래스는 파라미터로 넘겨 받은..." }, { "title": ":coffee: [Java] 접근 제어자와 생성자", "url": "/posts/access-modifier-constructor/", "categories": "java", "tags": "java", "date": "2020-08-10 00:00:00 +0800", "snippet": "접근 제어자와 생성자자바는 인스턴스 변수를 초기화시키기 위해 여러 개의 생성자를 만들어 제공한다. 필요에 맞는 적절한 생성자를 호출하여 인스턴스를 초기화시킨 후 사용해야 한다. 그러나 생성자가 있어도 접근 권한이 없으면 생성자를 호출할 수 없다. java.util.Calendar 클래스 소스코드를 살펴보면서 이해하고, 생성자를 직접 접근제어자로 막아보자.java.util.Calendarjava.util.Calendar 클래스의 생성자는 접근제어자 protected로 보호되고 있다. Calendar를 상속 받은 자식 클래스만 해..." }, { "title": "백준 알고리즘 2908번: 상수 (Java)", "url": "/posts/baekjoon3052/", "categories": "algorithm", "tags": "algorithm", "date": "2020-08-08 00:00:00 +0800", "snippet": "문제상근이는 수의 크기를 비교하는 문제를 내주었다. 첫째 줄에 상근이가 칠판에 적은 두 수 A와 B가 주어진다. 두 수는 같지 않은 세 자리 수이며, 0이 포함되어 있지 않다. 상수는 수를 다른 사람과 다르게 거꾸로 읽는다. 상수의 대답을 출력하라.풀이Scanner sc = new sc(System.in);// 나올 수 있는 나머지 가짓수 길이만큼 배열을 생성한다.// 자바에서 배열을 생성하면 각 값은 모두 0으로 초기화된다.int[] arr = new int[42];int count = 0;// 10개 숫자를 입력 받아 42..." }, { "title": "⚡ 정보처리기사 필기 3장. 어플리케이션 설계", "url": "/posts/data-processing-engineer-03/", "categories": "정보처리기사", "tags": "정보처리기사", "date": "2020-08-08 00:00:00 +0800", "snippet": "3장. 어플리케이션 설계주간컴공 채널의 지마님의 정보처리기사 필기 유튜브 강의를 들으며 정리한 내용입니다. 1과목 소프트웨어 설계의 3장 어플리케이션 설계 파트를 필기하였습니다.1. 소프트웨어 설계SW아키텍처 뜻: 기본 구조, 개발 기반 역할: 품질유지, 원칙, 지침 모듈: 부품기본 원리 모듈화: 유지관리 용이 (많으면 통합비용↑, 적으면 개발비용↑) 추상화: 포괄적 개념, 구체화하기 위해 필요, 가성비, 구조파악 용이 단계적 분해: 하향식, 추상화의 반복으로 더 많은 단계의 분해 가능 정보 은닉: 접근금지, 별..." }, { "title": "💻 01. HTTP 개요", "url": "/posts/network01/", "categories": "network", "tags": "network", "date": "2020-08-07 00:00:00 +0800", "snippet": "HTTP 개요네트워크를 공부하기 위해 developer.mozilla.org의 HTTP Overview 문서를 요약 정리하였습니다.HTTP란?HTTP(HyperText Transfer Protocol)은 www 상에서 정보를 주고 받을 수 있는 프로토콜으로 웹에서 이루어지는 모든 데이터 교환의 기초라 할 수 있습니다. 애플리케이션 계층의 확장 가능한 클라이언트-서버 프로토콜입니다.프로토콜통신 프로토콜(규약, Protocal)이란 데이터를 주고 받는(통신) 상호 간에 이 과정을 원활하게 하도록 해주는 미리 약속된 규칙을 말합니다..." }, { "title": ":coffee: [Java] 입력과 출력", "url": "/posts/input-output/", "categories": "java", "tags": "java", "date": "2020-08-05 00:00:00 +0800", "snippet": "콘솔로 출력하기printf()System.out.printf(&quot;%s, %d&quot;, &quot;안녕!&quot;, 1); 형식을 지정하지 않으면 print()와 같다. System.out.printf(&quot;Hello!\\n&quot;); 형식 %s: 지정한 자리에 문자열을 삽입한다. %d: 정수값을 10진수 문자열로 만들어 삽입한다. %x: 정수값을 16진수 문자열로 만들어 삽입한다. %c: 정수값을 문자로 만들어 삽입한다...." }, { "title": "학원 #17일차: 예외와 에러, outOfMemory, Program argument, JVM argument", "url": "/posts/200804-17/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-04 00:00:00 +0800", "snippet": "오늘은 배운 내용이 많아서 특히 중요한 부분은 다른 포스트에 나눠 작성하였다.메서드 호출매개변수의 데이터 타입이 기본형이면 메서드를 실행하면서 변경한 값이 반영되지 않습니다. 매개변수의 데이터타입이 참조형이면 메서드를 실행하면서 변경한 값이 반영됩니다. 이에 대한 자세한 설명은 “메서드 호출: 기본형과 참조형 매개변수의 차이점” 포트스에서 다루었습니다.JVM 메모리 구조메서드 호출을 이해하기 위해서는 우선 Java Virtual Machine이 어떻게 동작하는 지 알아야 합니다. “JVM 메모리: Method Area, St..." }, { "title": ":coffee: Recursive Call(재귀호출), Stack Overflow", "url": "/posts/recursive-call/", "categories": "java", "tags": "java", "date": "2020-08-04 00:00:00 +0800", "snippet": "recursive call (재귀호출)int result = 1;int n = 5;public static void main(String[] args){ for (int i = 2; i &amp;lt;= 5; i++) { result *= i; } System.out.println(result); result = factorial(5); System.out.println(result);}static int factorial(int n) { if (n == 1) return 1; r..." }, { "title": ":coffee: JVM 메모리: Method Area, Stack, Heap", "url": "/posts/jvm-memory/", "categories": "java", "tags": "java", "date": "2020-08-04 00:00:00 +0800", "snippet": "비트캠프 엄진영 강사님의 수업을 들으며 정리하였습니다.메서드와 JVM 메모리프로그램이 실행되면 JVM은 OS로부터 사용할 메모리를 할당받는다. JVM은 할당받은 메모리를 크게 Method Area, JVM Stack, Heap이라는 세 영역으로 나누어 관리한다. JVM이 종료하면 JVM이 사용했던 모든 메모리를 OS에 반납한다.Method Area 클래스 명령 코드를 둔다. static 변수(클래스 변수)를 둔다.JVM Stack 스레드 별로 JVM 메모리를 따로 관리한다. 메서드의 로컬 변수를 둔다. 각 메서드마다 ..." }, { "title": ":coffee: 메서드 호출: 기본형과 참조형 매개변수의 차이점", "url": "/posts/call-by-value-and-reference/", "categories": "java", "tags": "java", "date": "2020-08-04 00:00:00 +0800", "snippet": "메서드 호출메서드를 호출할 때, 매개변수의 타입이 기본형(primitive type)일 때는 기본형 값이 복사되고, 참조형(reference type)이면 인스턴스의 주소가 복사된다. 기본형 매개변수의 경우 변수의 값을 읽기만 할 수 있지만, 참조형 매개변수의 경우 변수의 값을 읽고 변경할 수 있다.call by valuepublic static void main(String[] args){ int a = 200; m1(a); // call by value System.out.println(a); // 200}..." }, { "title": "학원 #16일차: 메서드 문법", "url": "/posts/200803-16/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-08-03 00:00:00 +0800", "snippet": "오늘 공부한 내용mini pms 프로그램 예제 프로젝트 06 버전을 수행하면서 메서드가 필요한 이유에 대해 배웠습니다.메서드메서드란 코드를 관리하기 쉽고 재사용하기 쉽도록 기능 단위로 묶어 놓는 문법을 말한다. 메서드명과 변수 선언을 말하는 메서드 시그니처(method signature)와 메서드 블록을 뜻하는 메서드 몸체(method body)로 구성되어 있다.메서드 문법 메서드 선언 문법: [리턴값의 타입] 함수명(파라미터선언, ...){명령어들} 리턴값(return value)의 타입: 함수 블록에 들어..." }, { "title": "⚡ 정보처리기사 필기 2장. 화면 설계", "url": "/posts/data-processing-engineer-02/", "categories": "정보처리기사", "tags": "정보처리기사", "date": "2020-08-02 00:00:00 +0800", "snippet": "2장. 화면 설계주간컴공 채널의 지마님의 정보처리기사 필기 유튜브 강의를 들으며 정리한 내용입니다. 1과목 소프트웨어 설계의 1장 요구사항 확인 파트를 필기하였습니다.1. 사용자 인터페이스 사용자 인터페이스의 3가지 분야: 제어, 구성, 기능 사용자 인터페이스의 특징 만족도에 큰 영향을 끼치기 때문에, 가장 많이 변경된다. 편리성과 가독성, 이해도를 높인다. 최소한의 노력으로 결과를 얻을 수 있도록 한다. 소프트웨어 아키텍처를 숙지해야 한다. 사용자 인터페이..." }, { "title": "⚡ 정보처리기사 필기 1장. 요구사항 확인", "url": "/posts/data-processing-engineer-01/", "categories": "정보처리기사", "tags": "정보처리기사", "date": "2020-08-01 00:00:00 +0800", "snippet": "1장. 요구사항 확인주간컴공 채널의 지마님의 정보처리기사 필기 유튜브 강의를 들으며 정리한 내용입니다. 1과목 소프트웨어 설계의 1장 요구사항 확인 파트를 필기하였습니다.소프트웨어 생명주기소프트웨어 개발과정을 단계별로 나눈 것폭포수모델 각 단계를 한번씩만 거침(되돌릴 수 없음) 단계별 철저한 검증 필요 매뉴얼 작성 필요프로토타입 모델 기능적 인터페이스 중심으로 견본 개발 후 최종 개발 후 발견될 오류 방지나선형 모델 계획 - 분석(검증) - 개발 - 평가(오류방지) 의 단계를 반복 폭포수와 프로토타입의 장점 흡수하여..." }, { "title": "학원 #15일차: 배열과 흐름제어문, 클래스", "url": "/posts/200731-15/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-07-31 00:00:00 +0800", "snippet": "오늘 공부한 내용 mini pms 프로그램 예제 프로젝트 04 버전을 수행하면서 배열과 흐름 제어문을 활용하는 이유에 대해 배웠습니다. mini pms 프로그램 예제 프로젝트 0x 버전을 만들면서 클래스를 이용하여 새 데이터 타입을 정의하는 방법을 배웠습니다." }, { "title": "학원 #14일차: 제어문과 컬렉션", "url": "/posts/200730-14/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-07-30 00:00:00 +0800", "snippet": "흐름제어문 if 블록으로 묶지 않으면 첫번째 문장만 if에 종속된다. if 문의 조건은 반드시 boolean 데이터여야 한다.흐름제어문 if ~ else// if ~ else ~ 문법이 없다면?if (gender == 1) { System.out.println(&quot;여성&quot;); } if (gender == 2) { System.out.println(&quot;남성&quot;);}// 비효율적인 코드// =&amp;gt; 배타적인 조건일 경우 실행하지 않기 위해서 else 라는 문법 탄생 els..." }, { "title": "🍵 후위증감연산자와 컴파일 최적화", "url": "/posts/postfix-compiler/", "categories": "java", "tags": "java", "date": "2020-07-30 00:00:00 +0800", "snippet": "후위증감연산자와 컴파일러의 최적화 과정 이해하기int i = 7;int j = i++;System.out.println(i); // 8System.out.println(j); // 7위 코드를 이해하기 위해서는 컴파일러 과정에 대한 이해가 필요하다. 컴파일러는 컴파일 과정에서 원소스 코드를 똑같은 기능을 수행하는 다른 코드로 대체한다. 이것을 최적화 과정이라고 하기도 한다. 이때 이렇게 컴파일된 기계어 코드(Hello.class)를 원소스로 바꿀 때는 역 컴파일러를 사용하는데, 그렇게 생성된 코드는 최초의 소스코드 작성자가 작..." }, { "title": "학원 #13일차: 논리연산자와 비트연산자", "url": "/posts/200729-13/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-07-29 00:00:00 +0800", "snippet": "논리연산자 &amp;amp;&amp;amp; vs &amp;amp;, || vs |@&amp;amp;&amp;amp; vs &amp;amp;boolean a = false;boolean b = false;// &amp;amp;&amp;amp;boolean r = a &amp;amp;&amp;amp; (b = true);System.out.println(&quot;a=%b, b=%b, r=%b\\n&quot;, a, b, r);// a=false, b=false, r=false// &amp;amp;r = a &amp;amp; (b..." }, { "title": "학원 #12일차: 산술연산자와 형변환", "url": "/posts/200728-12/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-07-28 00:00:00 +0800", "snippet": "산술 연산자기본 연산 단위@정수 byte와 int// 리터럴에 대한 연산byte b;b = 5 + 6;// 변수에 대한 연산 byte x = 5, y = 6, z;z = x;z = y;//z = x + y; //컴파일 오류자바의 최소 연산 단위는 4바이트이다. 리터럴끼리의 연산은 결과도 리터럴로 간주하기 때문에 결과 값이 변수 범위 내의 값이면 저장을 허락한다. 변수에 저장된 값과 달리 리터럴 값은 컴파일 단계에서 값을 확인할 수 있기 때문이다.반면, 변수 끼리의 연산은 컴파일 단계에서 값을 확인할 수 없다. 자바는 정수 변..." }, { "title": "🍵 부동소수점의 쓰레기값 처리하기", "url": "/posts/floating-point-epsilon/", "categories": "java", "tags": "java, linux", "date": "2020-07-28 00:00:00 +0800", "snippet": "부동소수점의 극소수값실제로 부동소수점(실수) 연산을 다루는 것은 쉽지만, 컴퓨터의 부동소수점 연산 처리는 쉽지만은 않다. 컴퓨터에서 값은 2진수로 다루고, 이 때문에 컴퓨터가 부동소수점 값을 연산할 때 IEEE 754 명세에 따라 작업을 수행한다. 이 과정에 값의 왜곡이 발생할 수 있다. 이 문제는 CPU나 OS, JVM의 문제가 아니라 명세에 따라 부동소수점을 처리하는 모든 컴퓨터에서 발생하는 문제이다.따라서 부동소수점은 비교연산자를 사용하여 비교할 때, 부동소수점의 값을 비교할 때 IEEE 754 변환 공식에 따라 발생하는..." }, { "title": "학원 #11일차: 배열, 인스턴스와 레퍼런스, 가비지", "url": "/posts/200727-11/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-07-27 00:00:00 +0800", "snippet": "배열이란?배열을 배우기에 앞서 C언어에서의 배열 사용법을 살펴보며 배열의 기본적인 개념을 익혔다. ==&amp;gt; C언어의 포인터 변수와 배열. 배열을 사용하면 같은 종류의 메모리를 쉽게 만들 수 있다. 배열 레퍼런스를 선언하는 방법은 다음과 같다.int[] arr = new int[5]; // 메모리종류[] 메모리이름 = new 메모리종류[개수]// 데이터타입[] 변수명 = new 데이터타입[개수]//c언어 스타일 int arr[] = new int[5]; //단 개수를 지정해서는 안 된다.인스턴스와 레퍼런스int[..." }, { "title": "🍵 포인터 변수와 배열 feat. C언어", "url": "/posts/array-c/", "categories": "c", "tags": "c, java", "date": "2020-07-25 00:00:00 +0800", "snippet": "c언어에서 배열 사용하기C언어에서는 자바와 달리 직접 주소값을 조회할 수 있고 수정할 수도 있어 자바의 레퍼런스(reference)(포인터와 같은 개념) 개념을 이해하기 좋다.c언어의 규칙데이터타입에 따라 메모리가 정해져 있는 Java와 달리, c언어에서는 메모리는 운영체제에 따라 달라진다. 16비트 운영체제에서 int는 16비트, 32비트 운영체제에서는 32비트이다. 이때 CPU가 몇 비트인지는 중요하지 않다. Java는 운영체제에 상관 없이 무조건 4바이트이다.리눅스에서 c언어 소스코드 컴파일하기 컴파일하기 gcc -o ..." }, { "title": "학원 #10일차: Java 기초문법 프로젝트", "url": "/posts/200724-10/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-07-24 00:00:00 +0800", "snippet": "오늘 공부한 내용강의노트비트캠프 엄진영 강사님의 수업을 들으며 정리하였습니다.자바 문법 몸소 체험하기1. 낱개의 변수를 사용하여 여러 회원 정보 처리하기소스코드 바로가기낱개의 변수를 사용할 수는 있겠지만.. 5명이 아니라 1000명의 데이터를 입력받는다고 생각해보자.클래스의 패키지 정보 선언하기import java.util.Scanner;위와 같이 클래스의 패키지 정보를 미리 선언하여 컴파일러에게 알려줄 수 있다. 위의 코드에서 Scanner가 java.util에 있는 Scanner라는 것을 먼저 알려주면 Scanner를 사용..." }, { "title": "🐛 eclipse Java파일 실행 에러: class not found", "url": "/posts/error-elipse-class-not-found/", "categories": "error", "tags": "error", "date": "2020-07-24 00:00:00 +0800", "snippet": "에러로그eclipse와 Visual Studio Code로 gradle을 통해 시작한 프로젝트를 동시에 볼 때, vsc 플러그인과 충돌해서 이클립스 상에서 파일이 실행이 되지 않을 수가 있다. 이 경우 콘솔 창에서는 클래스를 찾을 수 없다는 에러가 뜬다. 클래스 파일이 생성되어야 하는 bin 폴더 해당 패키지 디렉토리를 확인해보면 실제로 class 파일 자체가 생성이 안 되어 있다. 이는 설정 파일이 잘못된 문제로, 이러면 설정 파일을 깔끔하게 지워주고 다시 생성하면 된다.방법 gradle clean: 빌드 폴더 삭제 gr..." }, { "title": "학원 #09일차: 변수 선언과 초기화, 할당, 부동소수점", "url": "/posts/200723-09/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-07-23 00:00:00 +0800", "snippet": "오늘 공부한 내용강의노트비트캠프 엄진영 강사님의 수업을 들으며 정리하였습니다.읽을 책 목록 코딩 인터뷰 완전 정복 코딩 알고리즘 The art of computer programming (도널드 커누스:) concrete mathematics(컴퓨터과학의 기초를 다지는 단단한 수학) Algorithms (개정 4판): Robert Sedgewick 그림으로 배우는 알고리즘 Pro Git (pdf는 무료) 배시 핵심 레퍼런스 리눅스 커맨드라인 완벽 입문서자바 개요1일 1 알고리즘 문제를 풀어야 한다. 책을 사서 ..." }, { "title": "학원 #08일차: 이클립스 사용법, 값을 메모리에 저장하는 방식", "url": "/posts/200722-08/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-07-22 00:00:00 +0800", "snippet": "이클립스 사용법 외부 프로젝트를 IDE로 불러오는 방법을 배웠다.1. 이클립스에 gradle로 만든 프로젝트 import하기 이클립스의 구성을 배웠다.전체 작업대를 work bench라고 하고, 이는 다양한 기능을 수행하는 view(예: navigator, console, project explorer..) 로 나뉘어진다. perspective(예: Debug, Java, Git, Web..)에 따라 view 구성이 달라진다. 값을 메모리에 저장하는 방식 부동소수점을 저장하는 방법 저장..." }, { "title": "🍵 문자열과 다른 데이터타입의 값을 연결하기", "url": "/posts/string-concatenation/", "categories": "java", "tags": "java", "date": "2020-07-22 00:00:00 +0800", "snippet": "개요기본적으로 문자열은 문자열 연결 연산자(concatenation)인 +를 사용하여 연결할 수 있다. 문자열은 문자열끼리만이 아니라 다른 종류의 값도 연결할 수 있는데, 그럴 경우 연결되기 전 다른 종류의 값이 먼저 문자열로 바뀐 후 연결된다.예시 문자열 + 문자열 System.out.println(&quot;Hello, &quot; + &quot;world!&quot;);//&quot;Hello, world!&quot; 문자열 + 논리 값 System.out.println(&quot;졸린가?: &q..." }, { "title": "🍵 부동소수점 리터럴", "url": "/posts/floating-point/", "categories": "java", "tags": "java", "date": "2020-07-22 00:00:00 +0800", "snippet": "부동소수점이란?Exponential 기호를 사용하여 소수점 위치를 조정할 수 있다. 3.14는 0.314e1, 31.4e-1, 314e-2로도 표현할 수 있는데, 이처럼 소수점이 둥둥 떠다니면서 움직인다고 하여서 이렇게 표현하는 방식을 부동소수점(floating point) 방식이라고 부른다.컴퓨터는 1과 0으로 데이터를 저장한다. 따라서 실수 값을 저장할 때 부동소수점 방식으로 저장하려면 1과 0으로 변환해야 한다. Java는 부동소수점을 저장할 때 전기전자기술자협회(IEEE)에서 개발한 IEEE 754 명세에 따라 2진수로..." }, { "title": "🍵 이스케이프 문자(escape character)", "url": "/posts/escape-character/", "categories": "java", "tags": "java", "date": "2020-07-22 00:00:00 +0800", "snippet": "정의이스케이프 문자(escape character, 제어 문자)는 문자 제어 코드로, 화면에 출력하는 문자가 아니라 문자 출력을 제어하는 문자이다. \\(역슬래쉬)와 한 개의 문자와 결합하여 작성한다.종류1. Line Feed(LF): \\n줄바꿈 문자System.out.println(&quot;Hello,\\nworld!&quot;);Hello,world!2. Carrage Return(CR): \\r커서를 처음으로 돌리는 문자System.out.println(&quot;Hello,\\rworld!&quot;);world!3. Ba..." }, { "title": "🍵 이클립스에 gradle로 만든 외부 프로젝트 import", "url": "/posts/eclipse-import-gradle-project/", "categories": "java", "tags": "java", "date": "2020-07-22 00:00:00 +0800", "snippet": "이클립스에 gradle로 만든 외부 프로젝트 불러오기기존에 존재하는 프로젝트를 불러오기 위해서는file(화면 상단) &amp;gt; import &amp;gt; general &amp;gt; existing project into workspace로 들어가야 한다.문제 상황그러나 이클립스가 아닌 다른 도구(이 경우에는 gradle)로 자바 프로젝트를 만들었을 경우 ‘No projects are found to import’라는 경고를 띄우며 이클립스가 인식을 하지 못한다.필요 조건이 이유는 프로젝트 폴더에 elipse 용 프로..." }, { "title": "코딩일지 #07일차: 개발 환경 구축, shell, 프로젝트 빌드", "url": "/posts/200721-07/", "categories": "bitcamp", "tags": "bitcamp, java", "date": "2020-07-21 00:00:00 +0800", "snippet": "01 - shellshell이란?사용자는 shell을 통해 os에 명령을 내릴 수 있음. shell은 사용자의 명령을 해석.os에 따른 shell의 종류 windows cmd: 기존 shell script powershell: cmd보다 강력한 스크립트 지원. unix 종류 sh: 최초 shell csh: c언어와 비슷하게 c 개발자들이 만듦 bsh bash: bsh의 리뉴얼 버전. 리눅스에서 ..." }, { "title": "oh-my-zsh 플러그인을 활용한 터미널 테마 바꾸기✨", "url": "/posts/ohmyzsh-theme/", "categories": "linux", "tags": "linux, shell", "date": "2020-07-21 00:00:00 +0800", "snippet": "밋밋한 터미널을 컬러풀한 테마로 바꿔보자.zsh과 oh-my-zsh 설치우선 z shell과 Oh My Zsh를 설치해준다. 여기를 따라해보자..zshrc 파일로 테마 설정하기설치가 끝났으면, 사용자 홈 경로(~)에서 .zshrc 파일을 열어준다. nano {파일명} 명령어를 치면 해당 파일을 편집할 수 있다.nano .zshrcZSH_THEME=&quot;robbyrussell&quot; # 여기에 원하는 테마 이름을 넣어주자!현재 테마는 ‘robbyrussell’로 지정되어 있다. 여기에 원하는 테마 이름을 넣으면 설정이 ..." }, { "title": "🍵 Gradle 빌드 도구로 자바 프로젝트 만들기", "url": "/posts/gradle-project/", "categories": "java", "tags": "java, linux", "date": "2020-07-21 00:00:00 +0800", "snippet": "0. gradle을 사용하는 이유프로그래밍 중에 생성되는 파일을 두는 폴더가 프로젝트 폴더이다. 다양한 종류의 파일을 한 폴더에 두면 관리하기가 불편하기 때문에 하위 폴더를 만들어 구분한다. 프로젝트의 하위 폴더를 만들 때는 국가, 회사, 개발자, 프로젝트에 상관 없이 일관된 방식으로 다루기 위해 메이븐(Maven) 빌드 도구의 표준 디렉토리 구조를 사용한다.메이븐 프로젝트 폴더└── src ├── main &amp;lt;== 애플리케이션 관련 파일을 두는 폴더 │   ├── java &amp;lt;== 예)..." }, { "title": "🐛 zsh 설치 에러: PAM Authentication failures", "url": "/posts/error-zsh-install-pam-authentication/", "categories": "error", "tags": "error, linux", "date": "2020-07-21 00:00:00 +0800", "snippet": "에러로그bash를 zsh로 전환하면서 생긴 에러다.여기대로 zsh를 다음의 명령어로 실행하려고 시도했으나..~$ sudo -s# chsh -s /bin/zsh root# chsh -s /bin/zsh usernamePassword: chsh: PAM: Authentication failures위와 같이 PAM 인증 실패가 뜬다.방법쉘의 유효성을 체크하는 라이브러리 파일을 수정하여 에러를 해결할 수 있다. sudo nano /etc/pam.d/chsh auth required pam_shells.so를 주석처리 한다. (#사..." }, { "title": "🐛 git clone 에러: certificate verification failed", "url": "/posts/error-gitclone-certificate-verification/", "categories": "error", "tags": "error, linux", "date": "2020-07-20 00:00:00 +0800", "snippet": "에러로그https 프로토콜을 사용해 git clone을 하던 중 다음과 같은 인증서 에러가 발생했다.$ git clone https://github.com/{username}/{reponame}.gitCloning into &#39;{reponame}&#39;fatal: unable to access &#39;https://github.com/{username}/{reponame}.git&#39; servercertificate verification failed. CAfile: /etc/ssl/certs/ca-certific..." }, { "title": ":tent: 학원 200713-0717_TIL: 자바 개발 환경 설정, jekyll 블로그 생성", "url": "/posts/TIL200718/", "categories": "TIL", "tags": "TIL", "date": "2020-07-18 00:00:00 +0800", "snippet": "2020-07-14 서버 애플리케이션 개발 도구 설치 톰캣 서버 설치 MariaDB 설치 및 설정 톰캣 서버 배치 후 테스트 수행 MariaDB에 예제 테이블 생성 및 예제 데이터 입력 애플리케이션 실행 방법 개념 공부 인터프리트 방식 컴파일 방식 자바 하이브리드 방식 2020-07-15 비트, 바이트와 메모리 관계 메모리에 데이터 저장하는 원리 자바 바이트코드 제작 직접..." }, { "title": "🌼 Jekyll Blog 첫 글", "url": "/posts/blog/", "categories": "blog", "tags": "blog", "date": "2020-07-17 00:00:00 +0800", "snippet": "앞으로 이 공간에는 공부하면서 배우고 느낀 것을 기록할 것입니다." } ]
